{"ast":null,"code":"import { assertArgument } from \"../utils/index.js\";\nimport { JsonRpcApiPollingProvider } from \"./provider-jsonrpc.js\";\n;\n/**\n *  A **BrowserProvider** is intended to wrap an injected provider which\n *  adheres to the [[link-eip-1193]] standard, which most (if not all)\n *  currently do.\n */\nexport class BrowserProvider extends JsonRpcApiPollingProvider {\n  #request;\n  /**\n   *  Connnect to the %%ethereum%% provider, optionally forcing the\n   *  %%network%%.\n   */\n  constructor(ethereum, network) {\n    super(network, {\n      batchMaxCount: 1\n    });\n    this.#request = async (method, params) => {\n      const payload = {\n        method,\n        params\n      };\n      this.emit(\"debug\", {\n        action: \"sendEip1193Request\",\n        payload\n      });\n      try {\n        const result = await ethereum.request(payload);\n        this.emit(\"debug\", {\n          action: \"receiveEip1193Result\",\n          result\n        });\n        return result;\n      } catch (e) {\n        const error = new Error(e.message);\n        error.code = e.code;\n        error.data = e.data;\n        error.payload = payload;\n        this.emit(\"debug\", {\n          action: \"receiveEip1193Error\",\n          error\n        });\n        throw error;\n      }\n    };\n  }\n  async send(method, params) {\n    await this._start();\n    return await super.send(method, params);\n  }\n  async _send(payload) {\n    assertArgument(!Array.isArray(payload), \"EIP-1193 does not support batch request\", \"payload\", payload);\n    try {\n      const result = await this.#request(payload.method, payload.params || []);\n      return [{\n        id: payload.id,\n        result\n      }];\n    } catch (e) {\n      return [{\n        id: payload.id,\n        error: {\n          code: e.code,\n          data: e.data,\n          message: e.message\n        }\n      }];\n    }\n  }\n  getRpcError(payload, error) {\n    error = JSON.parse(JSON.stringify(error));\n    // EIP-1193 gives us some machine-readable error codes, so rewrite\n    // them into \n    switch (error.error.code || -1) {\n      case 4001:\n        error.error.message = `ethers-user-denied: ${error.error.message}`;\n        break;\n      case 4200:\n        error.error.message = `ethers-unsupported: ${error.error.message}`;\n        break;\n    }\n    return super.getRpcError(payload, error);\n  }\n  /**\n   *  Resolves to ``true`` if the provider manages the %%address%%.\n   */\n  async hasSigner(address) {\n    if (address == null) {\n      address = 0;\n    }\n    const accounts = await this.send(\"eth_accounts\", []);\n    if (typeof address === \"number\") {\n      return accounts.length > address;\n    }\n    address = address.toLowerCase();\n    return accounts.filter(a => a.toLowerCase() === address).length !== 0;\n  }\n  async getSigner(address) {\n    if (address == null) {\n      address = 0;\n    }\n    if (!(await this.hasSigner(address))) {\n      try {\n        //const resp = \n        await this.#request(\"eth_requestAccounts\", []);\n        //console.log(\"RESP\", resp);\n      } catch (error) {\n        const payload = error.payload;\n        throw this.getRpcError(payload, {\n          id: payload.id,\n          error\n        });\n      }\n    }\n    return await super.getSigner(address);\n  }\n}","map":{"version":3,"names":["assertArgument","JsonRpcApiPollingProvider","BrowserProvider","request","constructor","ethereum","network","batchMaxCount","method","params","payload","emit","action","result","e","error","Error","message","code","data","send","_start","_send","Array","isArray","id","getRpcError","JSON","parse","stringify","hasSigner","address","accounts","length","toLowerCase","filter","a","getSigner"],"sources":["/Users/hamsterpapa/Desktop/ENS/Wallet-browser-extension/mwallet/node_modules/ethers/src.ts/providers/provider-browser.ts"],"sourcesContent":["import { assertArgument } from \"../utils/index.js\";\n\nimport { JsonRpcApiPollingProvider } from \"./provider-jsonrpc.js\";\n\nimport type {\n    JsonRpcError, JsonRpcPayload, JsonRpcResult,\n    JsonRpcSigner\n} from \"./provider-jsonrpc.js\";\nimport type { Networkish } from \"./network.js\";\n\n/**\n *  The interface to an [[link-eip-1193]] provider, which is a standard\n *  used by most injected providers, which the [[BrowserProvider]] accepts\n *  and exposes the API of.\n */\nexport interface Eip1193Provider {\n    /**\n     *  See [[link-eip-1193]] for details on this method.\n     */\n    request(request: { method: string, params?: Array<any> | Record<string, any> }): Promise<any>;\n};\n\n/**\n *  The possible additional events dispatched when using the ``\"debug\"``\n *  event on a [[BrowserProvider]].\n */\nexport type DebugEventBrowserProvider = {\n    action: \"sendEip1193Payload\",\n    payload: { method: string, params: Array<any> }\n} | {\n    action: \"receiveEip1193Result\",\n    result: any\n} | {\n    action: \"receiveEip1193Error\",\n    error: Error\n};\n\n\n/**\n *  A **BrowserProvider** is intended to wrap an injected provider which\n *  adheres to the [[link-eip-1193]] standard, which most (if not all)\n *  currently do.\n */\nexport class BrowserProvider extends JsonRpcApiPollingProvider {\n    #request: (method: string, params: Array<any> | Record<string, any>) => Promise<any>;\n\n    /**\n     *  Connnect to the %%ethereum%% provider, optionally forcing the\n     *  %%network%%.\n     */\n    constructor(ethereum: Eip1193Provider, network?: Networkish) {\n        super(network, { batchMaxCount: 1 });\n\n        this.#request = async (method: string, params: Array<any> | Record<string, any>) => {\n            const payload = { method, params };\n            this.emit(\"debug\", { action: \"sendEip1193Request\", payload });\n            try {\n                const result = await ethereum.request(payload);\n                this.emit(\"debug\", { action: \"receiveEip1193Result\", result });\n                return result;\n            } catch (e: any) {\n                const error = new Error(e.message);\n                (<any>error).code = e.code;\n                (<any>error).data = e.data;\n                (<any>error).payload = payload;\n                this.emit(\"debug\", { action: \"receiveEip1193Error\", error });\n                throw error;\n            }\n        };\n    }\n\n    async send(method: string, params: Array<any> | Record<string, any>): Promise<any> {\n        await this._start();\n\n        return await super.send(method, params);\n    }\n\n    async _send(payload: JsonRpcPayload | Array<JsonRpcPayload>): Promise<Array<JsonRpcResult | JsonRpcError>> {\n        assertArgument(!Array.isArray(payload), \"EIP-1193 does not support batch request\", \"payload\", payload);\n\n        try {\n            const result = await this.#request(payload.method, payload.params || [ ]);\n            return [ { id: payload.id, result } ];\n        } catch (e: any) {\n            return [ {\n                id: payload.id,\n                error: { code: e.code, data: e.data, message: e.message }\n            } ];\n        }\n    }\n\n    getRpcError(payload: JsonRpcPayload, error: JsonRpcError): Error {\n\n        error = JSON.parse(JSON.stringify(error));\n\n        // EIP-1193 gives us some machine-readable error codes, so rewrite\n        // them into \n        switch (error.error.code || -1) {\n            case 4001:\n                error.error.message = `ethers-user-denied: ${ error.error.message }`;\n                break;\n            case 4200:\n                error.error.message = `ethers-unsupported: ${ error.error.message }`;\n                break;\n        }\n\n        return super.getRpcError(payload, error);\n    }\n\n    /**\n     *  Resolves to ``true`` if the provider manages the %%address%%.\n     */\n    async hasSigner(address: number | string): Promise<boolean> {\n        if (address == null) { address = 0; }\n\n        const accounts = await this.send(\"eth_accounts\", [ ]);\n        if (typeof(address) === \"number\") {\n            return (accounts.length > address);\n        }\n\n        address = address.toLowerCase();\n        return accounts.filter((a: string) => (a.toLowerCase() === address)).length !== 0;\n    }\n\n    async getSigner(address?: number | string): Promise<JsonRpcSigner> {\n        if (address == null) { address = 0; }\n\n        if (!(await this.hasSigner(address))) {\n            try {\n                //const resp = \n                await this.#request(\"eth_requestAccounts\", [ ]);\n                //console.log(\"RESP\", resp);\n\n            } catch (error: any) {\n                const payload = error.payload;\n                throw this.getRpcError(payload, { id: payload.id, error });\n            }\n        }\n\n        return await super.getSigner(address);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}