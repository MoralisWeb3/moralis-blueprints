{"ast":null,"code":"/** converting camel-cased strings to be lowercase and link it with Separato */\nexport function toLowercaseSeparator(key) {\n  return key.replace(/([A-Z])/g, '-$1').toLowerCase();\n}\nexport function getStyleStr(style) {\n  return Object.keys(style).map(key => `${toLowercaseSeparator(key)}: ${style[key]};`).join(' ');\n}\n/** Returns the ratio of the device's physical pixel resolution to the css pixel resolution */\nexport function getPixelRatio() {\n  return window.devicePixelRatio || 1;\n}\n/** Rotate with the watermark as the center point */\nexport function rotateWatermark(ctx, rotateX, rotateY, rotate) {\n  ctx.translate(rotateX, rotateY);\n  ctx.rotate(Math.PI / 180 * Number(rotate));\n  ctx.translate(-rotateX, -rotateY);\n}\n/** Whether to re-render the watermark */\nexport const reRendering = (mutation, watermarkElement) => {\n  let flag = false;\n  // Whether to delete the watermark node\n  if (mutation.removedNodes.length) {\n    flag = Array.from(mutation.removedNodes).some(node => node === watermarkElement);\n  }\n  // Whether the watermark dom property value has been modified\n  if (mutation.type === 'attributes' && mutation.target === watermarkElement) {\n    flag = true;\n  }\n  return flag;\n};","map":{"version":3,"names":["toLowercaseSeparator","key","replace","toLowerCase","getStyleStr","style","Object","keys","map","join","getPixelRatio","window","devicePixelRatio","rotateWatermark","ctx","rotateX","rotateY","rotate","translate","Math","PI","Number","reRendering","mutation","watermarkElement","flag","removedNodes","length","Array","from","some","node","type","target"],"sources":["/Users/hamsterpapa/Desktop/ENS/Wallet-browser-extension/mwallet/node_modules/antd/es/watermark/utils.js"],"sourcesContent":["/** converting camel-cased strings to be lowercase and link it with Separato */\nexport function toLowercaseSeparator(key) {\n  return key.replace(/([A-Z])/g, '-$1').toLowerCase();\n}\nexport function getStyleStr(style) {\n  return Object.keys(style).map(key => `${toLowercaseSeparator(key)}: ${style[key]};`).join(' ');\n}\n/** Returns the ratio of the device's physical pixel resolution to the css pixel resolution */\nexport function getPixelRatio() {\n  return window.devicePixelRatio || 1;\n}\n/** Rotate with the watermark as the center point */\nexport function rotateWatermark(ctx, rotateX, rotateY, rotate) {\n  ctx.translate(rotateX, rotateY);\n  ctx.rotate(Math.PI / 180 * Number(rotate));\n  ctx.translate(-rotateX, -rotateY);\n}\n/** Whether to re-render the watermark */\nexport const reRendering = (mutation, watermarkElement) => {\n  let flag = false;\n  // Whether to delete the watermark node\n  if (mutation.removedNodes.length) {\n    flag = Array.from(mutation.removedNodes).some(node => node === watermarkElement);\n  }\n  // Whether the watermark dom property value has been modified\n  if (mutation.type === 'attributes' && mutation.target === watermarkElement) {\n    flag = true;\n  }\n  return flag;\n};"],"mappings":"AAAA;AACA,OAAO,SAASA,oBAAoBA,CAACC,GAAG,EAAE;EACxC,OAAOA,GAAG,CAACC,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,CAACC,WAAW,CAAC,CAAC;AACrD;AACA,OAAO,SAASC,WAAWA,CAACC,KAAK,EAAE;EACjC,OAAOC,MAAM,CAACC,IAAI,CAACF,KAAK,CAAC,CAACG,GAAG,CAACP,GAAG,IAAK,GAAED,oBAAoB,CAACC,GAAG,CAAE,KAAII,KAAK,CAACJ,GAAG,CAAE,GAAE,CAAC,CAACQ,IAAI,CAAC,GAAG,CAAC;AAChG;AACA;AACA,OAAO,SAASC,aAAaA,CAAA,EAAG;EAC9B,OAAOC,MAAM,CAACC,gBAAgB,IAAI,CAAC;AACrC;AACA;AACA,OAAO,SAASC,eAAeA,CAACC,GAAG,EAAEC,OAAO,EAAEC,OAAO,EAAEC,MAAM,EAAE;EAC7DH,GAAG,CAACI,SAAS,CAACH,OAAO,EAAEC,OAAO,CAAC;EAC/BF,GAAG,CAACG,MAAM,CAACE,IAAI,CAACC,EAAE,GAAG,GAAG,GAAGC,MAAM,CAACJ,MAAM,CAAC,CAAC;EAC1CH,GAAG,CAACI,SAAS,CAAC,CAACH,OAAO,EAAE,CAACC,OAAO,CAAC;AACnC;AACA;AACA,OAAO,MAAMM,WAAW,GAAGA,CAACC,QAAQ,EAAEC,gBAAgB,KAAK;EACzD,IAAIC,IAAI,GAAG,KAAK;EAChB;EACA,IAAIF,QAAQ,CAACG,YAAY,CAACC,MAAM,EAAE;IAChCF,IAAI,GAAGG,KAAK,CAACC,IAAI,CAACN,QAAQ,CAACG,YAAY,CAAC,CAACI,IAAI,CAACC,IAAI,IAAIA,IAAI,KAAKP,gBAAgB,CAAC;EAClF;EACA;EACA,IAAID,QAAQ,CAACS,IAAI,KAAK,YAAY,IAAIT,QAAQ,CAACU,MAAM,KAAKT,gBAAgB,EAAE;IAC1EC,IAAI,GAAG,IAAI;EACb;EACA,OAAOA,IAAI;AACb,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}