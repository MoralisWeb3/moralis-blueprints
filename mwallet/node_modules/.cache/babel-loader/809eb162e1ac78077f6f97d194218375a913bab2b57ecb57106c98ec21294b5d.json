{"ast":null,"code":"const U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nexport function fromBig(n, le = false) {\n  if (le) return {\n    h: Number(n & U32_MASK64),\n    l: Number(n >> _32n & U32_MASK64)\n  };\n  return {\n    h: Number(n >> _32n & U32_MASK64) | 0,\n    l: Number(n & U32_MASK64) | 0\n  };\n}\nexport function split(lst, le = false) {\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    const {\n      h,\n      l\n    } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\nexport const toBig = (h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => h << 32 - s | l >>> s;\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => h >>> s | l << 32 - s;\nconst rotrSL = (h, l, s) => h << 32 - s | l >>> s;\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;\nconst rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s;\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => h << s | l >>> 32 - s;\nconst rotlSL = (h, l, s) => l << s | h >>> 32 - s;\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;\nconst rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nexport function add(Ah, Al, Bh, Bl) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return {\n    h: Ah + Bh + (l / 2 ** 32 | 0) | 0,\n    l: l | 0\n  };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;\n// prettier-ignore\nconst u64 = {\n  fromBig,\n  split,\n  toBig,\n  shrSH,\n  shrSL,\n  rotrSH,\n  rotrSL,\n  rotrBH,\n  rotrBL,\n  rotr32H,\n  rotr32L,\n  rotlSH,\n  rotlSL,\n  rotlBH,\n  rotlBL,\n  add,\n  add3L,\n  add3H,\n  add4L,\n  add4H,\n  add5H,\n  add5L\n};\nexport default u64;","map":{"version":3,"names":["U32_MASK64","BigInt","_32n","fromBig","n","le","h","Number","l","split","lst","Ah","Uint32Array","length","Al","i","toBig","shrSH","s","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5L","El","add5H","Eh","u64"],"sources":["/Users/hamsterpapa/Desktop/ENS/Wallet-browser-extension/mwallet/node_modules/@noble/hashes/esm/_u64.js"],"sourcesContent":["const U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nexport function fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexport function split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexport const toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nexport function add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}