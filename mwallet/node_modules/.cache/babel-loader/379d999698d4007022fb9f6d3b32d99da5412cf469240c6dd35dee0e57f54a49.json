{"ast":null,"code":"import { generate } from '@ant-design/colors';\nimport { getAlphaColor, getSolidColor } from './colorAlgorithm';\nexport const generateColorPalettes = baseColor => {\n  const colors = generate(baseColor);\n  return {\n    1: colors[0],\n    2: colors[1],\n    3: colors[2],\n    4: colors[3],\n    5: colors[4],\n    6: colors[5],\n    7: colors[6],\n    8: colors[4],\n    9: colors[5],\n    10: colors[6]\n    // 8: colors[7],\n    // 9: colors[8],\n    // 10: colors[9],\n  };\n};\n\nexport const generateNeutralColorPalettes = (bgBaseColor, textBaseColor) => {\n  const colorBgBase = bgBaseColor || '#fff';\n  const colorTextBase = textBaseColor || '#000';\n  return {\n    colorBgBase,\n    colorTextBase,\n    colorText: getAlphaColor(colorTextBase, 0.88),\n    colorTextSecondary: getAlphaColor(colorTextBase, 0.65),\n    colorTextTertiary: getAlphaColor(colorTextBase, 0.45),\n    colorTextQuaternary: getAlphaColor(colorTextBase, 0.25),\n    colorFill: getAlphaColor(colorTextBase, 0.15),\n    colorFillSecondary: getAlphaColor(colorTextBase, 0.06),\n    colorFillTertiary: getAlphaColor(colorTextBase, 0.04),\n    colorFillQuaternary: getAlphaColor(colorTextBase, 0.02),\n    colorBgLayout: getSolidColor(colorBgBase, 4),\n    colorBgContainer: getSolidColor(colorBgBase, 0),\n    colorBgElevated: getSolidColor(colorBgBase, 0),\n    colorBgSpotlight: getAlphaColor(colorTextBase, 0.85),\n    colorBorder: getSolidColor(colorBgBase, 15),\n    colorBorderSecondary: getSolidColor(colorBgBase, 6)\n  };\n};","map":{"version":3,"names":["generate","getAlphaColor","getSolidColor","generateColorPalettes","baseColor","colors","generateNeutralColorPalettes","bgBaseColor","textBaseColor","colorBgBase","colorTextBase","colorText","colorTextSecondary","colorTextTertiary","colorTextQuaternary","colorFill","colorFillSecondary","colorFillTertiary","colorFillQuaternary","colorBgLayout","colorBgContainer","colorBgElevated","colorBgSpotlight","colorBorder","colorBorderSecondary"],"sources":["/Users/hamsterpapa/Desktop/ENS/Wallet-browser-extension/mwallet/node_modules/antd/es/theme/themes/default/colors.js"],"sourcesContent":["import { generate } from '@ant-design/colors';\nimport { getAlphaColor, getSolidColor } from './colorAlgorithm';\nexport const generateColorPalettes = baseColor => {\n  const colors = generate(baseColor);\n  return {\n    1: colors[0],\n    2: colors[1],\n    3: colors[2],\n    4: colors[3],\n    5: colors[4],\n    6: colors[5],\n    7: colors[6],\n    8: colors[4],\n    9: colors[5],\n    10: colors[6]\n    // 8: colors[7],\n    // 9: colors[8],\n    // 10: colors[9],\n  };\n};\n\nexport const generateNeutralColorPalettes = (bgBaseColor, textBaseColor) => {\n  const colorBgBase = bgBaseColor || '#fff';\n  const colorTextBase = textBaseColor || '#000';\n  return {\n    colorBgBase,\n    colorTextBase,\n    colorText: getAlphaColor(colorTextBase, 0.88),\n    colorTextSecondary: getAlphaColor(colorTextBase, 0.65),\n    colorTextTertiary: getAlphaColor(colorTextBase, 0.45),\n    colorTextQuaternary: getAlphaColor(colorTextBase, 0.25),\n    colorFill: getAlphaColor(colorTextBase, 0.15),\n    colorFillSecondary: getAlphaColor(colorTextBase, 0.06),\n    colorFillTertiary: getAlphaColor(colorTextBase, 0.04),\n    colorFillQuaternary: getAlphaColor(colorTextBase, 0.02),\n    colorBgLayout: getSolidColor(colorBgBase, 4),\n    colorBgContainer: getSolidColor(colorBgBase, 0),\n    colorBgElevated: getSolidColor(colorBgBase, 0),\n    colorBgSpotlight: getAlphaColor(colorTextBase, 0.85),\n    colorBorder: getSolidColor(colorBgBase, 15),\n    colorBorderSecondary: getSolidColor(colorBgBase, 6)\n  };\n};"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,oBAAoB;AAC7C,SAASC,aAAa,EAAEC,aAAa,QAAQ,kBAAkB;AAC/D,OAAO,MAAMC,qBAAqB,GAAGC,SAAS,IAAI;EAChD,MAAMC,MAAM,GAAGL,QAAQ,CAACI,SAAS,CAAC;EAClC,OAAO;IACL,CAAC,EAAEC,MAAM,CAAC,CAAC,CAAC;IACZ,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC;IACZ,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC;IACZ,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC;IACZ,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC;IACZ,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC;IACZ,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC;IACZ,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC;IACZ,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC;IACZ,EAAE,EAAEA,MAAM,CAAC,CAAC;IACZ;IACA;IACA;EACF,CAAC;AACH,CAAC;;AAED,OAAO,MAAMC,4BAA4B,GAAGA,CAACC,WAAW,EAAEC,aAAa,KAAK;EAC1E,MAAMC,WAAW,GAAGF,WAAW,IAAI,MAAM;EACzC,MAAMG,aAAa,GAAGF,aAAa,IAAI,MAAM;EAC7C,OAAO;IACLC,WAAW;IACXC,aAAa;IACbC,SAAS,EAAEV,aAAa,CAACS,aAAa,EAAE,IAAI,CAAC;IAC7CE,kBAAkB,EAAEX,aAAa,CAACS,aAAa,EAAE,IAAI,CAAC;IACtDG,iBAAiB,EAAEZ,aAAa,CAACS,aAAa,EAAE,IAAI,CAAC;IACrDI,mBAAmB,EAAEb,aAAa,CAACS,aAAa,EAAE,IAAI,CAAC;IACvDK,SAAS,EAAEd,aAAa,CAACS,aAAa,EAAE,IAAI,CAAC;IAC7CM,kBAAkB,EAAEf,aAAa,CAACS,aAAa,EAAE,IAAI,CAAC;IACtDO,iBAAiB,EAAEhB,aAAa,CAACS,aAAa,EAAE,IAAI,CAAC;IACrDQ,mBAAmB,EAAEjB,aAAa,CAACS,aAAa,EAAE,IAAI,CAAC;IACvDS,aAAa,EAAEjB,aAAa,CAACO,WAAW,EAAE,CAAC,CAAC;IAC5CW,gBAAgB,EAAElB,aAAa,CAACO,WAAW,EAAE,CAAC,CAAC;IAC/CY,eAAe,EAAEnB,aAAa,CAACO,WAAW,EAAE,CAAC,CAAC;IAC9Ca,gBAAgB,EAAErB,aAAa,CAACS,aAAa,EAAE,IAAI,CAAC;IACpDa,WAAW,EAAErB,aAAa,CAACO,WAAW,EAAE,EAAE,CAAC;IAC3Ce,oBAAoB,EAAEtB,aAAa,CAACO,WAAW,EAAE,CAAC;EACpD,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}