{"ast":null,"code":"import { keccak256 } from \"../crypto/index.js\";\nimport { concat, hexlify, assertArgument, toUtf8Bytes } from \"../utils/index.js\";\nimport { ens_normalize } from \"@adraffy/ens-normalize\";\nconst Zeros = new Uint8Array(32);\nZeros.fill(0);\nfunction checkComponent(comp) {\n  assertArgument(comp.length !== 0, \"invalid ENS name; empty component\", \"comp\", comp);\n  return comp;\n}\nfunction ensNameSplit(name) {\n  const bytes = toUtf8Bytes(ensNormalize(name));\n  const comps = [];\n  if (name.length === 0) {\n    return comps;\n  }\n  let last = 0;\n  for (let i = 0; i < bytes.length; i++) {\n    const d = bytes[i];\n    // A separator (i.e. \".\"); copy this component\n    if (d === 0x2e) {\n      comps.push(checkComponent(bytes.slice(last, i)));\n      last = i + 1;\n    }\n  }\n  // There was a stray separator at the end of the name\n  assertArgument(last < bytes.length, \"invalid ENS name; empty component\", \"name\", name);\n  comps.push(checkComponent(bytes.slice(last)));\n  return comps;\n}\n/**\n *  Returns the ENS %%name%% normalized.\n */\nexport function ensNormalize(name) {\n  try {\n    return ens_normalize(name);\n  } catch (error) {\n    assertArgument(false, `invalid ENS name (${error.message})`, \"name\", name);\n  }\n}\n/**\n *  Returns ``true`` if %%name%% is a valid ENS name.\n */\nexport function isValidName(name) {\n  try {\n    return ensNameSplit(name).length !== 0;\n  } catch (error) {}\n  return false;\n}\n/**\n *  Returns the [[link-namehash]] for %%name%%.\n */\nexport function namehash(name) {\n  assertArgument(typeof name === \"string\", \"invalid ENS name; not a string\", \"name\", name);\n  let result = Zeros;\n  const comps = ensNameSplit(name);\n  while (comps.length) {\n    result = keccak256(concat([result, keccak256(comps.pop())]));\n  }\n  return hexlify(result);\n}\n/**\n *  Returns the DNS encoded %%name%%.\n *\n *  This is used for various parts of ENS name resolution, such\n *  as the wildcard resolution.\n */\nexport function dnsEncode(name) {\n  return hexlify(concat(ensNameSplit(name).map(comp => {\n    // DNS does not allow components over 63 bytes in length\n    if (comp.length > 63) {\n      throw new Error(\"invalid DNS encoded entry; length exceeds 63 bytes\");\n    }\n    const bytes = new Uint8Array(comp.length + 1);\n    bytes.set(comp, 1);\n    bytes[0] = bytes.length - 1;\n    return bytes;\n  }))) + \"00\";\n}","map":{"version":3,"names":["keccak256","concat","hexlify","assertArgument","toUtf8Bytes","ens_normalize","Zeros","Uint8Array","fill","checkComponent","comp","length","ensNameSplit","name","bytes","ensNormalize","comps","last","i","d","push","slice","error","message","isValidName","namehash","result","pop","dnsEncode","map","Error","set"],"sources":["/Users/hamsterpapa/Desktop/ENS/Wallet-browser-extension/mwallet/node_modules/ethers/src.ts/hash/namehash.ts"],"sourcesContent":["\nimport { keccak256 } from \"../crypto/index.js\";\nimport {\n    concat, hexlify, assertArgument, toUtf8Bytes\n} from \"../utils/index.js\";\n\n\nimport { ens_normalize } from \"@adraffy/ens-normalize\";\n\nconst Zeros = new Uint8Array(32);\nZeros.fill(0);\n\nfunction checkComponent(comp: Uint8Array): Uint8Array {\n    assertArgument(comp.length !== 0, \"invalid ENS name; empty component\", \"comp\", comp)\n    return comp;\n}\n\nfunction ensNameSplit(name: string): Array<Uint8Array> {\n    const bytes = toUtf8Bytes(ensNormalize(name));\n    const comps: Array<Uint8Array> = [ ];\n\n    if (name.length === 0) { return comps; }\n\n    let last = 0;\n    for (let i = 0; i < bytes.length; i++) {\n        const d = bytes[i];\n\n        // A separator (i.e. \".\"); copy this component\n        if (d === 0x2e) {\n            comps.push(checkComponent(bytes.slice(last, i)));\n            last = i + 1;\n        }\n    }\n\n    // There was a stray separator at the end of the name\n    assertArgument(last < bytes.length, \"invalid ENS name; empty component\", \"name\", name);\n\n    comps.push(checkComponent(bytes.slice(last)));\n    return comps;\n}\n\n/**\n *  Returns the ENS %%name%% normalized.\n */\nexport function ensNormalize(name: string): string {\n    try {\n        return ens_normalize(name);\n    } catch (error: any) {\n        assertArgument(false, `invalid ENS name (${ error.message })`, \"name\", name);\n    }\n}\n\n/**\n *  Returns ``true`` if %%name%% is a valid ENS name.\n */\nexport function isValidName(name: string): name is string {\n    try {\n        return (ensNameSplit(name).length !== 0);\n    } catch (error) { }\n    return false;\n}\n\n/**\n *  Returns the [[link-namehash]] for %%name%%.\n */\nexport function namehash(name: string): string {\n    assertArgument(typeof(name) === \"string\", \"invalid ENS name; not a string\", \"name\", name);\n\n    let result: string | Uint8Array = Zeros;\n\n    const comps = ensNameSplit(name);\n    while (comps.length) {\n        result = keccak256(concat([ result, keccak256(<Uint8Array>(comps.pop()))] ));\n    }\n\n    return hexlify(result);\n}\n\n/**\n *  Returns the DNS encoded %%name%%.\n *\n *  This is used for various parts of ENS name resolution, such\n *  as the wildcard resolution.\n */\nexport function dnsEncode(name: string): string {\n    return hexlify(concat(ensNameSplit(name).map((comp) => {\n        // DNS does not allow components over 63 bytes in length\n        if (comp.length > 63) {\n            throw new Error(\"invalid DNS encoded entry; length exceeds 63 bytes\");\n        }\n\n        const bytes = new Uint8Array(comp.length + 1);\n        bytes.set(comp, 1);\n        bytes[0] = bytes.length - 1;\n        return bytes;\n\n    }))) + \"00\";\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}