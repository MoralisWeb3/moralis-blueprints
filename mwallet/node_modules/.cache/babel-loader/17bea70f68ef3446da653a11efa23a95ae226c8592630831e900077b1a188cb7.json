{"ast":null,"code":"/**\n *  [[link-etherscan]] provides a third-party service for connecting to\n *  various blockchains over a combination of JSON-RPC and custom API\n *  endpoints.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection api/providers/thirdparty:Etherscan  [providers-etherscan]\n */\nimport { AbiCoder } from \"../abi/index.js\";\nimport { Contract } from \"../contract/index.js\";\nimport { accessListify, Transaction } from \"../transaction/index.js\";\nimport { defineProperties, hexlify, toQuantity, FetchRequest, assert, assertArgument, isError, toUtf8String } from \"../utils/index.js\";\nimport { AbstractProvider } from \"./abstract-provider.js\";\nimport { Network } from \"./network.js\";\nimport { NetworkPlugin } from \"./plugins-network.js\";\nimport { showThrottleMessage } from \"./community.js\";\nconst THROTTLE = 2000;\nfunction isPromise(value) {\n  return value && typeof value.then === \"function\";\n}\nconst EtherscanPluginId = \"org.ethers.plugins.provider.Etherscan\";\n/**\n *  A Network can include an **EtherscanPlugin** to provide\n *  a custom base URL.\n *\n *  @_docloc: api/providers/thirdparty:Etherscan\n */\nexport class EtherscanPlugin extends NetworkPlugin {\n  /**\n   *  The Etherscan API base URL.\n   */\n  baseUrl;\n  /**\n   *  Creates a new **EtherscanProvider** which will use\n   *  %%baseUrl%%.\n   */\n  constructor(baseUrl) {\n    super(EtherscanPluginId);\n    defineProperties(this, {\n      baseUrl\n    });\n  }\n  clone() {\n    return new EtherscanPlugin(this.baseUrl);\n  }\n}\nconst skipKeys = [\"enableCcipRead\"];\nlet nextId = 1;\n/**\n *  The **EtherscanBaseProvider** is the super-class of\n *  [[EtherscanProvider]], which should generally be used instead.\n *\n *  Since the **EtherscanProvider** includes additional code for\n *  [[Contract]] access, in //rare cases// that contracts are not\n *  used, this class can reduce code size.\n *\n *  @_docloc: api/providers/thirdparty:Etherscan\n */\nexport class EtherscanProvider extends AbstractProvider {\n  /**\n   *  The connected network.\n   */\n  network;\n  /**\n   *  The API key or null if using the community provided bandwidth.\n   */\n  apiKey;\n  #plugin;\n  /**\n   *  Creates a new **EtherscanBaseProvider**.\n   */\n  constructor(_network, _apiKey) {\n    const apiKey = _apiKey != null ? _apiKey : null;\n    super();\n    const network = Network.from(_network);\n    this.#plugin = network.getPlugin(EtherscanPluginId);\n    defineProperties(this, {\n      apiKey,\n      network\n    });\n    // Test that the network is supported by Etherscan\n    this.getBaseUrl();\n  }\n  /**\n   *  Returns the base URL.\n   *\n   *  If an [[EtherscanPlugin]] is configured on the\n   *  [[EtherscanBaseProvider_network]], returns the plugin's\n   *  baseUrl.\n   */\n  getBaseUrl() {\n    if (this.#plugin) {\n      return this.#plugin.baseUrl;\n    }\n    switch (this.network.name) {\n      case \"mainnet\":\n        return \"https:/\\/api.etherscan.io\";\n      case \"goerli\":\n        return \"https:/\\/api-goerli.etherscan.io\";\n      case \"sepolia\":\n        return \"https:/\\/api-sepolia.etherscan.io\";\n      case \"arbitrum\":\n        return \"https:/\\/api.arbiscan.io\";\n      case \"arbitrum-goerli\":\n        return \"https:/\\/api-goerli.arbiscan.io\";\n      case \"matic\":\n        return \"https:/\\/api.polygonscan.com\";\n      case \"matic-mumbai\":\n        return \"https:/\\/api-testnet.polygonscan.com\";\n      case \"optimism\":\n        return \"https:/\\/api-optimistic.etherscan.io\";\n      case \"optimism-goerli\":\n        return \"https:/\\/api-goerli-optimistic.etherscan.io\";\n      case \"bnb\":\n        return \"http:/\\/api.bscscan.com\";\n      case \"bnbt\":\n        return \"http:/\\/api-testnet.bscscan.com\";\n      default:\n    }\n    assertArgument(false, \"unsupported network\", \"network\", this.network);\n  }\n  /**\n   *  Returns the URL for the %%module%% and %%params%%.\n   */\n  getUrl(module, params) {\n    const query = Object.keys(params).reduce((accum, key) => {\n      const value = params[key];\n      if (value != null) {\n        accum += `&${key}=${value}`;\n      }\n      return accum;\n    }, \"\");\n    const apiKey = this.apiKey ? `&apikey=${this.apiKey}` : \"\";\n    return `${this.getBaseUrl()}/api?module=${module}${query}${apiKey}`;\n  }\n  /**\n   *  Returns the URL for using POST requests.\n   */\n  getPostUrl() {\n    return `${this.getBaseUrl()}/api`;\n  }\n  /**\n   *  Returns the parameters for using POST requests.\n   */\n  getPostData(module, params) {\n    params.module = module;\n    params.apikey = this.apiKey;\n    return params;\n  }\n  async detectNetwork() {\n    return this.network;\n  }\n  /**\n   *  Resolves to the result of calling %%module%% with %%params%%.\n   *\n   *  If %%post%%, the request is made as a POST request.\n   */\n  async fetch(module, params, post) {\n    const id = nextId++;\n    const url = post ? this.getPostUrl() : this.getUrl(module, params);\n    const payload = post ? this.getPostData(module, params) : null;\n    this.emit(\"debug\", {\n      action: \"sendRequest\",\n      id,\n      url,\n      payload: payload\n    });\n    const request = new FetchRequest(url);\n    request.setThrottleParams({\n      slotInterval: 1000\n    });\n    request.retryFunc = (req, resp, attempt) => {\n      if (this.isCommunityResource()) {\n        showThrottleMessage(\"Etherscan\");\n      }\n      return Promise.resolve(true);\n    };\n    request.processFunc = async (request, response) => {\n      const result = response.hasBody() ? JSON.parse(toUtf8String(response.body)) : {};\n      const throttle = (typeof result.result === \"string\" ? result.result : \"\").toLowerCase().indexOf(\"rate limit\") >= 0;\n      if (module === \"proxy\") {\n        // This JSON response indicates we are being throttled\n        if (result && result.status == 0 && result.message == \"NOTOK\" && throttle) {\n          this.emit(\"debug\", {\n            action: \"receiveError\",\n            id,\n            reason: \"proxy-NOTOK\",\n            error: result\n          });\n          response.throwThrottleError(result.result, THROTTLE);\n        }\n      } else {\n        if (throttle) {\n          this.emit(\"debug\", {\n            action: \"receiveError\",\n            id,\n            reason: \"null result\",\n            error: result.result\n          });\n          response.throwThrottleError(result.result, THROTTLE);\n        }\n      }\n      return response;\n    };\n    if (payload) {\n      request.setHeader(\"content-type\", \"application/x-www-form-urlencoded; charset=UTF-8\");\n      request.body = Object.keys(payload).map(k => `${k}=${payload[k]}`).join(\"&\");\n    }\n    const response = await request.send();\n    try {\n      response.assertOk();\n    } catch (error) {\n      this.emit(\"debug\", {\n        action: \"receiveError\",\n        id,\n        error,\n        reason: \"assertOk\"\n      });\n      assert(false, \"response error\", \"SERVER_ERROR\", {\n        request,\n        response\n      });\n    }\n    if (!response.hasBody()) {\n      this.emit(\"debug\", {\n        action: \"receiveError\",\n        id,\n        error: \"missing body\",\n        reason: \"null body\"\n      });\n      assert(false, \"missing response\", \"SERVER_ERROR\", {\n        request,\n        response\n      });\n    }\n    const result = JSON.parse(toUtf8String(response.body));\n    if (module === \"proxy\") {\n      if (result.jsonrpc != \"2.0\") {\n        this.emit(\"debug\", {\n          action: \"receiveError\",\n          id,\n          result,\n          reason: \"invalid JSON-RPC\"\n        });\n        assert(false, \"invalid JSON-RPC response (missing jsonrpc='2.0')\", \"SERVER_ERROR\", {\n          request,\n          response,\n          info: {\n            result\n          }\n        });\n      }\n      if (result.error) {\n        this.emit(\"debug\", {\n          action: \"receiveError\",\n          id,\n          result,\n          reason: \"JSON-RPC error\"\n        });\n        assert(false, \"error response\", \"SERVER_ERROR\", {\n          request,\n          response,\n          info: {\n            result\n          }\n        });\n      }\n      this.emit(\"debug\", {\n        action: \"receiveRequest\",\n        id,\n        result\n      });\n      return result.result;\n    } else {\n      // getLogs, getHistory have weird success responses\n      if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n        this.emit(\"debug\", {\n          action: \"receiveRequest\",\n          id,\n          result\n        });\n        return result.result;\n      }\n      if (result.status != 1 || typeof result.message === \"string\" && !result.message.match(/^OK/)) {\n        this.emit(\"debug\", {\n          action: \"receiveError\",\n          id,\n          result\n        });\n        assert(false, \"error response\", \"SERVER_ERROR\", {\n          request,\n          response,\n          info: {\n            result\n          }\n        });\n      }\n      this.emit(\"debug\", {\n        action: \"receiveRequest\",\n        id,\n        result\n      });\n      return result.result;\n    }\n  }\n  /**\n   *  Returns %%transaction%% normalized for the Etherscan API.\n   */\n  _getTransactionPostData(transaction) {\n    const result = {};\n    for (let key in transaction) {\n      if (skipKeys.indexOf(key) >= 0) {\n        continue;\n      }\n      if (transaction[key] == null) {\n        continue;\n      }\n      let value = transaction[key];\n      if (key === \"type\" && value === 0) {\n        continue;\n      }\n      // Quantity-types require no leading zero, unless 0\n      if ({\n        type: true,\n        gasLimit: true,\n        gasPrice: true,\n        maxFeePerGs: true,\n        maxPriorityFeePerGas: true,\n        nonce: true,\n        value: true\n      }[key]) {\n        value = toQuantity(value);\n      } else if (key === \"accessList\") {\n        value = \"[\" + accessListify(value).map(set => {\n          return `{address:\"${set.address}\",storageKeys:[\"${set.storageKeys.join('\",\"')}\"]}`;\n        }).join(\",\") + \"]\";\n      } else {\n        value = hexlify(value);\n      }\n      result[key] = value;\n    }\n    return result;\n  }\n  /**\n   *  Throws the normalized Etherscan error.\n   */\n  _checkError(req, error, transaction) {\n    // Pull any message out if, possible\n    let message = \"\";\n    if (isError(error, \"SERVER_ERROR\")) {\n      // Check for an error emitted by a proxy call\n      try {\n        message = error.info.result.error.message;\n      } catch (e) {}\n      if (!message) {\n        try {\n          message = error.info.message;\n        } catch (e) {}\n      }\n    }\n    if (req.method === \"estimateGas\") {\n      if (!message.match(/revert/i) && message.match(/insufficient funds/i)) {\n        assert(false, \"insufficient funds\", \"INSUFFICIENT_FUNDS\", {\n          transaction: req.transaction\n        });\n      }\n    }\n    if (req.method === \"call\" || req.method === \"estimateGas\") {\n      if (message.match(/execution reverted/i)) {\n        let data = \"\";\n        try {\n          data = error.info.result.error.data;\n        } catch (error) {}\n        const e = AbiCoder.getBuiltinCallException(req.method, req.transaction, data);\n        e.info = {\n          request: req,\n          error\n        };\n        throw e;\n      }\n    }\n    if (message) {\n      if (req.method === \"broadcastTransaction\") {\n        const transaction = Transaction.from(req.signedTransaction);\n        if (message.match(/replacement/i) && message.match(/underpriced/i)) {\n          assert(false, \"replacement fee too low\", \"REPLACEMENT_UNDERPRICED\", {\n            transaction\n          });\n        }\n        if (message.match(/insufficient funds/)) {\n          assert(false, \"insufficient funds for intrinsic transaction cost\", \"INSUFFICIENT_FUNDS\", {\n            transaction\n          });\n        }\n        if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n          assert(false, \"nonce has already been used\", \"NONCE_EXPIRED\", {\n            transaction\n          });\n        }\n      }\n    }\n    // Something we could not process\n    throw error;\n  }\n  async _detectNetwork() {\n    return this.network;\n  }\n  async _perform(req) {\n    switch (req.method) {\n      case \"chainId\":\n        return this.network.chainId;\n      case \"getBlockNumber\":\n        return this.fetch(\"proxy\", {\n          action: \"eth_blockNumber\"\n        });\n      case \"getGasPrice\":\n        return this.fetch(\"proxy\", {\n          action: \"eth_gasPrice\"\n        });\n      case \"getBalance\":\n        // Returns base-10 result\n        return this.fetch(\"account\", {\n          action: \"balance\",\n          address: req.address,\n          tag: req.blockTag\n        });\n      case \"getTransactionCount\":\n        return this.fetch(\"proxy\", {\n          action: \"eth_getTransactionCount\",\n          address: req.address,\n          tag: req.blockTag\n        });\n      case \"getCode\":\n        return this.fetch(\"proxy\", {\n          action: \"eth_getCode\",\n          address: req.address,\n          tag: req.blockTag\n        });\n      case \"getStorage\":\n        return this.fetch(\"proxy\", {\n          action: \"eth_getStorageAt\",\n          address: req.address,\n          position: req.position,\n          tag: req.blockTag\n        });\n      case \"broadcastTransaction\":\n        return this.fetch(\"proxy\", {\n          action: \"eth_sendRawTransaction\",\n          hex: req.signedTransaction\n        }, true).catch(error => {\n          return this._checkError(req, error, req.signedTransaction);\n        });\n      case \"getBlock\":\n        if (\"blockTag\" in req) {\n          return this.fetch(\"proxy\", {\n            action: \"eth_getBlockByNumber\",\n            tag: req.blockTag,\n            boolean: req.includeTransactions ? \"true\" : \"false\"\n          });\n        }\n        assert(false, \"getBlock by blockHash not supported by Etherscan\", \"UNSUPPORTED_OPERATION\", {\n          operation: \"getBlock(blockHash)\"\n        });\n      case \"getTransaction\":\n        return this.fetch(\"proxy\", {\n          action: \"eth_getTransactionByHash\",\n          txhash: req.hash\n        });\n      case \"getTransactionReceipt\":\n        return this.fetch(\"proxy\", {\n          action: \"eth_getTransactionReceipt\",\n          txhash: req.hash\n        });\n      case \"call\":\n        {\n          if (req.blockTag !== \"latest\") {\n            throw new Error(\"EtherscanProvider does not support blockTag for call\");\n          }\n          const postData = this._getTransactionPostData(req.transaction);\n          postData.module = \"proxy\";\n          postData.action = \"eth_call\";\n          try {\n            return await this.fetch(\"proxy\", postData, true);\n          } catch (error) {\n            return this._checkError(req, error, req.transaction);\n          }\n        }\n      case \"estimateGas\":\n        {\n          const postData = this._getTransactionPostData(req.transaction);\n          postData.module = \"proxy\";\n          postData.action = \"eth_estimateGas\";\n          try {\n            return await this.fetch(\"proxy\", postData, true);\n          } catch (error) {\n            return this._checkError(req, error, req.transaction);\n          }\n        }\n      /*\n                  case \"getLogs\": {\n                      // Needs to complain if more than one address is passed in\n                      const args: Record<string, any> = { action: \"getLogs\" }\n      \n                      if (params.filter.fromBlock) {\n                          args.fromBlock = checkLogTag(params.filter.fromBlock);\n                      }\n      \n                      if (params.filter.toBlock) {\n                          args.toBlock = checkLogTag(params.filter.toBlock);\n                      }\n      \n                      if (params.filter.address) {\n                          args.address = params.filter.address;\n                      }\n      \n                      // @TODO: We can handle slightly more complicated logs using the logs API\n                      if (params.filter.topics && params.filter.topics.length > 0) {\n                          if (params.filter.topics.length > 1) {\n                              logger.throwError(\"unsupported topic count\", Logger.Errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n                          }\n                          if (params.filter.topics.length === 1) {\n                              const topic0 = params.filter.topics[0];\n                              if (typeof(topic0) !== \"string\" || topic0.length !== 66) {\n                                  logger.throwError(\"unsupported topic format\", Logger.Errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\n                              }\n                              args.topic0 = topic0;\n                          }\n                      }\n      \n                      const logs: Array<any> = await this.fetch(\"logs\", args);\n      \n                      // Cache txHash => blockHash\n                      let blocks: { [tag: string]: string } = {};\n      \n                      // Add any missing blockHash to the logs\n                      for (let i = 0; i < logs.length; i++) {\n                          const log = logs[i];\n                          if (log.blockHash != null) { continue; }\n                          if (blocks[log.blockNumber] == null) {\n                              const block = await this.getBlock(log.blockNumber);\n                              if (block) {\n                                  blocks[log.blockNumber] = block.hash;\n                              }\n                          }\n      \n                          log.blockHash = blocks[log.blockNumber];\n                      }\n      \n                      return logs;\n                  }\n      */\n      default:\n        break;\n    }\n    return super._perform(req);\n  }\n  async getNetwork() {\n    return this.network;\n  }\n  /**\n   *  Resolves to the current price of ether.\n   *\n   *  This returns ``0`` on any network other than ``mainnet``.\n   */\n  async getEtherPrice() {\n    if (this.network.name !== \"mainnet\") {\n      return 0.0;\n    }\n    return parseFloat((await this.fetch(\"stats\", {\n      action: \"ethprice\"\n    })).ethusd);\n  }\n  /**\n   *  Resolves to a [Contract]] for %%address%%, using the\n   *  Etherscan API to retreive the Contract ABI.\n   */\n  async getContract(_address) {\n    let address = this._getAddress(_address);\n    if (isPromise(address)) {\n      address = await address;\n    }\n    try {\n      const resp = await this.fetch(\"contract\", {\n        action: \"getabi\",\n        address\n      });\n      const abi = JSON.parse(resp);\n      return new Contract(address, abi, this);\n    } catch (error) {\n      return null;\n    }\n  }\n  isCommunityResource() {\n    return this.apiKey == null;\n  }\n}","map":{"version":3,"names":["AbiCoder","Contract","accessListify","Transaction","defineProperties","hexlify","toQuantity","FetchRequest","assert","assertArgument","isError","toUtf8String","AbstractProvider","Network","NetworkPlugin","showThrottleMessage","THROTTLE","isPromise","value","then","EtherscanPluginId","EtherscanPlugin","baseUrl","constructor","clone","skipKeys","nextId","EtherscanProvider","network","apiKey","plugin","_network","_apiKey","from","getPlugin","getBaseUrl","name","getUrl","module","params","query","Object","keys","reduce","accum","key","getPostUrl","getPostData","apikey","detectNetwork","fetch","post","id","url","payload","emit","action","request","setThrottleParams","slotInterval","retryFunc","req","resp","attempt","isCommunityResource","Promise","resolve","processFunc","response","result","hasBody","JSON","parse","body","throttle","toLowerCase","indexOf","status","message","reason","error","throwThrottleError","setHeader","map","k","join","send","assertOk","jsonrpc","info","match","_getTransactionPostData","transaction","type","gasLimit","gasPrice","maxFeePerGs","maxPriorityFeePerGas","nonce","set","address","storageKeys","_checkError","e","method","data","getBuiltinCallException","signedTransaction","_detectNetwork","_perform","chainId","tag","blockTag","position","hex","catch","boolean","includeTransactions","operation","txhash","hash","Error","postData","getNetwork","getEtherPrice","parseFloat","ethusd","getContract","_address","_getAddress","abi"],"sources":["/Users/hamsterpapa/Desktop/ENS/Wallet-browser-extension/mwallet/node_modules/ethers/src.ts/providers/provider-etherscan.ts"],"sourcesContent":["/**\n *  [[link-etherscan]] provides a third-party service for connecting to\n *  various blockchains over a combination of JSON-RPC and custom API\n *  endpoints.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection api/providers/thirdparty:Etherscan  [providers-etherscan]\n */\n\nimport { AbiCoder } from \"../abi/index.js\";\nimport { Contract } from \"../contract/index.js\";\nimport { accessListify, Transaction } from \"../transaction/index.js\";\nimport {\n    defineProperties,\n    hexlify, toQuantity,\n    FetchRequest,\n    assert, assertArgument, isError,\n    toUtf8String\n } from \"../utils/index.js\";\n\nimport { AbstractProvider } from \"./abstract-provider.js\";\nimport { Network } from \"./network.js\";\nimport { NetworkPlugin } from \"./plugins-network.js\";\nimport { showThrottleMessage } from \"./community.js\";\n\nimport { PerformActionRequest } from \"./abstract-provider.js\";\nimport type { Networkish } from \"./network.js\";\n//import type { } from \"./pagination\";\nimport type { TransactionRequest } from \"./provider.js\";\n\nconst THROTTLE = 2000;\n\nfunction isPromise<T = any>(value: any): value is Promise<T> {\n    return (value && typeof(value.then) === \"function\");\n}\n\n\n/**\n *  When subscribing to the ``\"debug\"`` event on an Etherscan-based\n *  provider, the events receive a **DebugEventEtherscanProvider**\n *  payload.\n *\n *  @_docloc: api/providers/thirdparty:Etherscan\n */\nexport type DebugEventEtherscanProvider = {\n    action: \"sendRequest\",\n    id: number,\n    url: string,\n    payload: Record<string, any>\n} | {\n    action: \"receiveRequest\",\n    id: number,\n    result: any\n} | {\n    action: \"receiveError\",\n    id: number,\n    error: any\n};\n\nconst EtherscanPluginId = \"org.ethers.plugins.provider.Etherscan\";\n\n/**\n *  A Network can include an **EtherscanPlugin** to provide\n *  a custom base URL.\n *\n *  @_docloc: api/providers/thirdparty:Etherscan\n */\nexport class EtherscanPlugin extends NetworkPlugin {\n    /**\n     *  The Etherscan API base URL.\n     */\n    readonly baseUrl!: string;\n\n    /**\n     *  Creates a new **EtherscanProvider** which will use\n     *  %%baseUrl%%.\n     */\n    constructor(baseUrl: string) {\n        super(EtherscanPluginId);\n        defineProperties<EtherscanPlugin>(this, { baseUrl });\n    }\n\n    clone(): EtherscanPlugin {\n        return new EtherscanPlugin(this.baseUrl);\n    }\n}\n\nconst skipKeys = [ \"enableCcipRead\" ];\n\nlet nextId = 1;\n\n/**\n *  The **EtherscanBaseProvider** is the super-class of\n *  [[EtherscanProvider]], which should generally be used instead.\n *\n *  Since the **EtherscanProvider** includes additional code for\n *  [[Contract]] access, in //rare cases// that contracts are not\n *  used, this class can reduce code size.\n *\n *  @_docloc: api/providers/thirdparty:Etherscan\n */\nexport class EtherscanProvider extends AbstractProvider {\n\n    /**\n     *  The connected network.\n     */\n    readonly network!: Network;\n\n    /**\n     *  The API key or null if using the community provided bandwidth.\n     */\n    readonly apiKey!: null | string;\n\n    readonly #plugin: null | EtherscanPlugin;\n\n    /**\n     *  Creates a new **EtherscanBaseProvider**.\n     */\n    constructor(_network?: Networkish, _apiKey?: string) {\n        const apiKey = (_apiKey != null) ? _apiKey: null;\n\n        super();\n\n        const network = Network.from(_network);\n\n        this.#plugin = network.getPlugin<EtherscanPlugin>(EtherscanPluginId);\n\n        defineProperties<EtherscanProvider>(this, { apiKey, network });\n\n        // Test that the network is supported by Etherscan\n        this.getBaseUrl();\n    }\n\n    /**\n     *  Returns the base URL.\n     *\n     *  If an [[EtherscanPlugin]] is configured on the\n     *  [[EtherscanBaseProvider_network]], returns the plugin's\n     *  baseUrl.\n     */\n    getBaseUrl(): string {\n        if (this.#plugin) { return this.#plugin.baseUrl; }\n\n        switch(this.network.name) {\n            case \"mainnet\":\n                return \"https:/\\/api.etherscan.io\";\n            case \"goerli\":\n                return \"https:/\\/api-goerli.etherscan.io\";\n            case \"sepolia\":\n                return \"https:/\\/api-sepolia.etherscan.io\";\n\n            case \"arbitrum\":\n                return \"https:/\\/api.arbiscan.io\";\n            case \"arbitrum-goerli\":\n                return \"https:/\\/api-goerli.arbiscan.io\";\n            case \"matic\":\n                return \"https:/\\/api.polygonscan.com\";\n            case \"matic-mumbai\":\n                return \"https:/\\/api-testnet.polygonscan.com\";\n            case \"optimism\":\n                return \"https:/\\/api-optimistic.etherscan.io\";\n            case \"optimism-goerli\":\n                return \"https:/\\/api-goerli-optimistic.etherscan.io\";\n\n            case \"bnb\":\n                return \"http:/\\/api.bscscan.com\";\n            case \"bnbt\":\n                return \"http:/\\/api-testnet.bscscan.com\";\n\n            default:\n        }\n\n        assertArgument(false, \"unsupported network\", \"network\", this.network);\n    }\n\n    /**\n     *  Returns the URL for the %%module%% and %%params%%.\n     */\n    getUrl(module: string, params: Record<string, string>): string {\n        const query = Object.keys(params).reduce((accum, key) => {\n            const value = params[key];\n            if (value != null) {\n                accum += `&${ key }=${ value }`\n            }\n            return accum\n        }, \"\");\n        const apiKey = ((this.apiKey) ? `&apikey=${ this.apiKey }`: \"\");\n        return `${ this.getBaseUrl() }/api?module=${ module }${ query }${ apiKey }`;\n    }\n\n    /**\n     *  Returns the URL for using POST requests.\n     */\n    getPostUrl(): string {\n        return `${ this.getBaseUrl() }/api`;\n    }\n\n    /**\n     *  Returns the parameters for using POST requests.\n     */\n    getPostData(module: string, params: Record<string, any>): Record<string, any> {\n        params.module = module;\n        params.apikey = this.apiKey;\n        return params;\n    }\n\n    async detectNetwork(): Promise<Network> {\n        return this.network;\n    }\n\n    /**\n     *  Resolves to the result of calling %%module%% with %%params%%.\n     *\n     *  If %%post%%, the request is made as a POST request.\n     */\n    async fetch(module: string, params: Record<string, any>, post?: boolean): Promise<any> {\n        const id = nextId++;\n\n        const url = (post ? this.getPostUrl(): this.getUrl(module, params));\n        const payload = (post ? this.getPostData(module, params): null);\n\n        this.emit(\"debug\", { action: \"sendRequest\", id, url, payload: payload });\n\n        const request = new FetchRequest(url);\n        request.setThrottleParams({ slotInterval: 1000 });\n        request.retryFunc = (req, resp, attempt: number) => {\n            if (this.isCommunityResource()) {\n                showThrottleMessage(\"Etherscan\");\n            }\n            return Promise.resolve(true);\n        };\n        request.processFunc = async (request, response) => {\n            const result = response.hasBody() ? JSON.parse(toUtf8String(response.body)): { };\n            const throttle = ((typeof(result.result) === \"string\") ? result.result: \"\").toLowerCase().indexOf(\"rate limit\") >= 0;\n            if (module === \"proxy\") {\n                // This JSON response indicates we are being throttled\n                if (result && result.status == 0 && result.message == \"NOTOK\" && throttle) {\n                    this.emit(\"debug\", { action: \"receiveError\", id, reason: \"proxy-NOTOK\", error: result });\n                    response.throwThrottleError(result.result, THROTTLE);\n                }\n            } else {\n                if (throttle) {\n                    this.emit(\"debug\", { action: \"receiveError\", id, reason: \"null result\", error: result.result });\n                    response.throwThrottleError(result.result, THROTTLE);\n                }\n            }\n            return response;\n        };\n\n        if (payload) {\n            request.setHeader(\"content-type\", \"application/x-www-form-urlencoded; charset=UTF-8\");\n            request.body = Object.keys(payload).map((k) => `${ k }=${ payload[k] }`).join(\"&\");\n        }\n\n        const response = await request.send();\n        try {\n            response.assertOk();\n        } catch (error) {\n            this.emit(\"debug\", { action: \"receiveError\", id, error, reason: \"assertOk\" });\n            assert(false, \"response error\", \"SERVER_ERROR\", { request, response });\n        }\n\n        if (!response.hasBody()) {\n            this.emit(\"debug\", { action: \"receiveError\", id, error: \"missing body\", reason: \"null body\" });\n            assert(false, \"missing response\", \"SERVER_ERROR\", { request, response });\n        }\n\n        const result = JSON.parse(toUtf8String(response.body));\n        if (module === \"proxy\") {\n            if (result.jsonrpc != \"2.0\") {\n                this.emit(\"debug\", { action: \"receiveError\", id, result, reason: \"invalid JSON-RPC\" });\n                assert(false, \"invalid JSON-RPC response (missing jsonrpc='2.0')\", \"SERVER_ERROR\", { request, response, info: { result } });\n            }\n\n            if (result.error) {\n                this.emit(\"debug\", { action: \"receiveError\", id, result, reason: \"JSON-RPC error\" });\n                assert(false, \"error response\", \"SERVER_ERROR\", { request, response, info: { result } });\n            }\n\n            this.emit(\"debug\", { action: \"receiveRequest\", id, result });\n\n            return result.result;\n\n        } else {\n            // getLogs, getHistory have weird success responses\n            if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n                this.emit(\"debug\", { action: \"receiveRequest\", id, result });\n                return result.result;\n            }\n\n            if (result.status != 1 || (typeof(result.message) === \"string\" && !result.message.match(/^OK/))) {\n                this.emit(\"debug\", { action: \"receiveError\", id, result });\n                assert(false, \"error response\", \"SERVER_ERROR\", { request, response, info: { result } });\n            }\n\n            this.emit(\"debug\", { action: \"receiveRequest\", id, result });\n\n            return result.result;\n        }\n    }\n\n    /**\n     *  Returns %%transaction%% normalized for the Etherscan API.\n     */\n    _getTransactionPostData(transaction: TransactionRequest): Record<string, string> {\n        const result: Record<string, string> = { };\n        for (let key in transaction) {\n            if (skipKeys.indexOf(key) >= 0) { continue; }\n\n            if ((<any>transaction)[key] == null) { continue; }\n            let value = (<any>transaction)[key];\n            if (key === \"type\" && value === 0) { continue; }\n\n            // Quantity-types require no leading zero, unless 0\n            if ((<any>{ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true })[key]) {\n                value = toQuantity(value);\n            } else if (key === \"accessList\") {\n                value = \"[\" + accessListify(value).map((set) => {\n                    return `{address:\"${ set.address }\",storageKeys:[\"${ set.storageKeys.join('\",\"') }\"]}`;\n                }).join(\",\") + \"]\";\n            } else {\n                value = hexlify(value);\n            }\n            result[key] = value;\n        }\n        return result;\n    }\n\n    /**\n     *  Throws the normalized Etherscan error.\n     */\n    _checkError(req: PerformActionRequest, error: Error, transaction: any): never {\n\n        // Pull any message out if, possible\n        let message = \"\";\n        if (isError(error, \"SERVER_ERROR\")) {\n            // Check for an error emitted by a proxy call\n            try {\n                message = (<any>error).info.result.error.message;\n            } catch (e) { }\n\n            if (!message) {\n                try {\n                    message = (<any>error).info.message;\n                } catch (e) { }\n            }\n        }\n\n        if (req.method === \"estimateGas\") {\n            if (!message.match(/revert/i) && message.match(/insufficient funds/i)) {\n                assert(false, \"insufficient funds\", \"INSUFFICIENT_FUNDS\", {\n                    transaction: req.transaction\n                });\n            }\n        }\n\n        if (req.method === \"call\" || req.method === \"estimateGas\") {\n            if (message.match(/execution reverted/i)) {\n                let data = \"\";\n                try {\n                    data = (<any>error).info.result.error.data;\n                } catch (error) { }\n\n                const e = AbiCoder.getBuiltinCallException(req.method, <any>req.transaction, data);\n                e.info = { request: req, error }\n                throw e;\n            }\n        }\n\n        if (message) {\n            if (req.method === \"broadcastTransaction\") {\n                const transaction = Transaction.from(req.signedTransaction);\n                if (message.match(/replacement/i) && message.match(/underpriced/i)) {\n                    assert(false, \"replacement fee too low\", \"REPLACEMENT_UNDERPRICED\", {\n                        transaction\n                    });\n                }\n\n                if (message.match(/insufficient funds/)) {\n                    assert(false, \"insufficient funds for intrinsic transaction cost\", \"INSUFFICIENT_FUNDS\", {\n                       transaction\n                    });\n                }\n\n                if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n                    assert(false, \"nonce has already been used\", \"NONCE_EXPIRED\", {\n                       transaction\n                    });\n                }\n            }\n        }\n\n        // Something we could not process\n        throw error;\n    }\n\n    async _detectNetwork(): Promise<Network> {\n        return this.network;\n    }\n\n    async _perform(req: PerformActionRequest): Promise<any> {\n        switch (req.method) {\n            case \"chainId\":\n                return this.network.chainId;\n\n            case \"getBlockNumber\":\n                return this.fetch(\"proxy\", { action: \"eth_blockNumber\" });\n\n            case \"getGasPrice\":\n                return this.fetch(\"proxy\", { action: \"eth_gasPrice\" });\n\n            case \"getBalance\":\n                // Returns base-10 result\n                return this.fetch(\"account\", {\n                    action: \"balance\",\n                    address: req.address,\n                    tag: req.blockTag\n                });\n\n           case \"getTransactionCount\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionCount\",\n                    address: req.address,\n                    tag: req.blockTag\n                });\n\n            case \"getCode\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getCode\",\n                    address: req.address,\n                    tag: req.blockTag\n                });\n\n            case \"getStorage\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getStorageAt\",\n                    address: req.address,\n                    position: req.position,\n                    tag: req.blockTag\n                });\n\n            case \"broadcastTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_sendRawTransaction\",\n                    hex: req.signedTransaction\n                }, true).catch((error) => {\n                    return this._checkError(req, <Error>error, req.signedTransaction);\n                });\n\n            case \"getBlock\":\n                if (\"blockTag\" in req) {\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getBlockByNumber\",\n                        tag: req.blockTag,\n                        boolean: (req.includeTransactions ? \"true\": \"false\")\n                    });\n                }\n\n                assert(false, \"getBlock by blockHash not supported by Etherscan\", \"UNSUPPORTED_OPERATION\", {\n                    operation: \"getBlock(blockHash)\"\n                });\n\n            case \"getTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionByHash\",\n                    txhash: req.hash\n                });\n\n            case \"getTransactionReceipt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionReceipt\",\n                    txhash: req.hash\n                });\n\n            case \"call\": {\n                if (req.blockTag !== \"latest\") {\n                    throw new Error(\"EtherscanProvider does not support blockTag for call\");\n                }\n\n                const postData = this._getTransactionPostData(req.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_call\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return this._checkError(req, <Error>error, req.transaction);\n                }\n            }\n\n            case \"estimateGas\": {\n                const postData = this._getTransactionPostData(req.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_estimateGas\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return this._checkError(req, <Error>error, req.transaction);\n                }\n            }\n/*\n            case \"getLogs\": {\n                // Needs to complain if more than one address is passed in\n                const args: Record<string, any> = { action: \"getLogs\" }\n\n                if (params.filter.fromBlock) {\n                    args.fromBlock = checkLogTag(params.filter.fromBlock);\n                }\n\n                if (params.filter.toBlock) {\n                    args.toBlock = checkLogTag(params.filter.toBlock);\n                }\n\n                if (params.filter.address) {\n                    args.address = params.filter.address;\n                }\n\n                // @TODO: We can handle slightly more complicated logs using the logs API\n                if (params.filter.topics && params.filter.topics.length > 0) {\n                    if (params.filter.topics.length > 1) {\n                        logger.throwError(\"unsupported topic count\", Logger.Errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n                    }\n                    if (params.filter.topics.length === 1) {\n                        const topic0 = params.filter.topics[0];\n                        if (typeof(topic0) !== \"string\" || topic0.length !== 66) {\n                            logger.throwError(\"unsupported topic format\", Logger.Errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\n                        }\n                        args.topic0 = topic0;\n                    }\n                }\n\n                const logs: Array<any> = await this.fetch(\"logs\", args);\n\n                // Cache txHash => blockHash\n                let blocks: { [tag: string]: string } = {};\n\n                // Add any missing blockHash to the logs\n                for (let i = 0; i < logs.length; i++) {\n                    const log = logs[i];\n                    if (log.blockHash != null) { continue; }\n                    if (blocks[log.blockNumber] == null) {\n                        const block = await this.getBlock(log.blockNumber);\n                        if (block) {\n                            blocks[log.blockNumber] = block.hash;\n                        }\n                    }\n\n                    log.blockHash = blocks[log.blockNumber];\n                }\n\n                return logs;\n            }\n*/\n            default:\n                break;\n        }\n\n        return super._perform(req);\n    }\n\n    async getNetwork(): Promise<Network> {\n        return this.network;\n    }\n\n    /**\n     *  Resolves to the current price of ether.\n     *\n     *  This returns ``0`` on any network other than ``mainnet``.\n     */\n    async getEtherPrice(): Promise<number> {\n        if (this.network.name !== \"mainnet\") { return 0.0; }\n        return parseFloat((await this.fetch(\"stats\", { action: \"ethprice\" })).ethusd);\n    }\n\n    /**\n     *  Resolves to a [Contract]] for %%address%%, using the\n     *  Etherscan API to retreive the Contract ABI.\n     */\n    async getContract(_address: string): Promise<null | Contract> {\n        let address = this._getAddress(_address);\n        if (isPromise(address)) { address = await address; }\n\n        try {\n            const resp = await this.fetch(\"contract\", {\n            action: \"getabi\", address });\n            const abi = JSON.parse(resp);\n            return new Contract(address, abi, this);\n        } catch (error) {\n            return null;\n        }\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey == null);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}