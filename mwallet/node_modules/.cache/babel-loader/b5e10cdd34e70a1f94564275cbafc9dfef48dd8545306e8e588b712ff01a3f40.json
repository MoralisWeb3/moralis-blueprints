{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\"],\n  _excluded2 = [\"fixed\"];\nimport toArray from \"rc-util/es/Children/toArray\";\nimport warning from \"rc-util/es/warning\";\nimport * as React from 'react';\nimport { EXPAND_COLUMN } from \"../constant\";\nimport { INTERNAL_COL_DEFINE } from \"../utils/legacyUtil\";\nexport function convertChildrenToColumns(children) {\n  return toArray(children).filter(function (node) {\n    return /*#__PURE__*/React.isValidElement(node);\n  }).map(function (_ref) {\n    var key = _ref.key,\n      props = _ref.props;\n    var nodeChildren = props.children,\n      restProps = _objectWithoutProperties(props, _excluded);\n    var column = _objectSpread({\n      key: key\n    }, restProps);\n    if (nodeChildren) {\n      column.children = convertChildrenToColumns(nodeChildren);\n    }\n    return column;\n  });\n}\nfunction flatColumns(columns) {\n  return columns.filter(function (column) {\n    return column && _typeof(column) === 'object';\n  }).reduce(function (list, column) {\n    var fixed = column.fixed;\n    // Convert `fixed='true'` to `fixed='left'` instead\n    var parsedFixed = fixed === true ? 'left' : fixed;\n    var subColumns = column.children;\n    if (subColumns && subColumns.length > 0) {\n      return [].concat(_toConsumableArray(list), _toConsumableArray(flatColumns(subColumns).map(function (subColum) {\n        return _objectSpread({\n          fixed: parsedFixed\n        }, subColum);\n      })));\n    }\n    return [].concat(_toConsumableArray(list), [_objectSpread(_objectSpread({}, column), {}, {\n      fixed: parsedFixed\n    })]);\n  }, []);\n}\nfunction warningFixed(flattenColumns) {\n  var allFixLeft = true;\n  for (var i = 0; i < flattenColumns.length; i += 1) {\n    var col = flattenColumns[i];\n    if (allFixLeft && col.fixed !== 'left') {\n      allFixLeft = false;\n    } else if (!allFixLeft && col.fixed === 'left') {\n      warning(false, \"Index \".concat(i - 1, \" of `columns` missing `fixed='left'` prop.\"));\n      break;\n    }\n  }\n  var allFixRight = true;\n  for (var _i = flattenColumns.length - 1; _i >= 0; _i -= 1) {\n    var _col = flattenColumns[_i];\n    if (allFixRight && _col.fixed !== 'right') {\n      allFixRight = false;\n    } else if (!allFixRight && _col.fixed === 'right') {\n      warning(false, \"Index \".concat(_i + 1, \" of `columns` missing `fixed='right'` prop.\"));\n      break;\n    }\n  }\n}\nfunction revertForRtl(columns) {\n  return columns.map(function (column) {\n    var fixed = column.fixed,\n      restProps = _objectWithoutProperties(column, _excluded2);\n\n    // Convert `fixed='left'` to `fixed='right'` instead\n    var parsedFixed = fixed;\n    if (fixed === 'left') {\n      parsedFixed = 'right';\n    } else if (fixed === 'right') {\n      parsedFixed = 'left';\n    }\n    return _objectSpread({\n      fixed: parsedFixed\n    }, restProps);\n  });\n}\n\n/**\n * Parse `columns` & `children` into `columns`.\n */\nfunction useColumns(_ref2, transformColumns) {\n  var prefixCls = _ref2.prefixCls,\n    columns = _ref2.columns,\n    children = _ref2.children,\n    expandable = _ref2.expandable,\n    expandedKeys = _ref2.expandedKeys,\n    columnTitle = _ref2.columnTitle,\n    getRowKey = _ref2.getRowKey,\n    onTriggerExpand = _ref2.onTriggerExpand,\n    expandIcon = _ref2.expandIcon,\n    rowExpandable = _ref2.rowExpandable,\n    expandIconColumnIndex = _ref2.expandIconColumnIndex,\n    direction = _ref2.direction,\n    expandRowByClick = _ref2.expandRowByClick,\n    columnWidth = _ref2.columnWidth,\n    fixed = _ref2.fixed;\n  var baseColumns = React.useMemo(function () {\n    return columns || convertChildrenToColumns(children);\n  }, [columns, children]);\n\n  // ========================== Expand ==========================\n  var withExpandColumns = React.useMemo(function () {\n    if (expandable) {\n      var _expandColumn;\n      var cloneColumns = baseColumns.slice();\n\n      // >>> Warning if use `expandIconColumnIndex`\n      if (process.env.NODE_ENV !== 'production' && expandIconColumnIndex >= 0) {\n        warning(false, '`expandIconColumnIndex` is deprecated. Please use `Table.EXPAND_COLUMN` in `columns` instead.');\n      }\n\n      // >>> Insert expand column if not exist\n      if (!cloneColumns.includes(EXPAND_COLUMN)) {\n        var expandColIndex = expandIconColumnIndex || 0;\n        if (expandColIndex >= 0) {\n          cloneColumns.splice(expandColIndex, 0, EXPAND_COLUMN);\n        }\n      }\n\n      // >>> Deduplicate additional expand column\n      if (process.env.NODE_ENV !== 'production' && cloneColumns.filter(function (c) {\n        return c === EXPAND_COLUMN;\n      }).length > 1) {\n        warning(false, 'There exist more than one `EXPAND_COLUMN` in `columns`.');\n      }\n      var expandColumnIndex = cloneColumns.indexOf(EXPAND_COLUMN);\n      cloneColumns = cloneColumns.filter(function (column, index) {\n        return column !== EXPAND_COLUMN || index === expandColumnIndex;\n      });\n\n      // >>> Check if expand column need to fixed\n      var prevColumn = baseColumns[expandColumnIndex];\n      var fixedColumn;\n      if ((fixed === 'left' || fixed) && !expandIconColumnIndex) {\n        fixedColumn = 'left';\n      } else if ((fixed === 'right' || fixed) && expandIconColumnIndex === baseColumns.length) {\n        fixedColumn = 'right';\n      } else {\n        fixedColumn = prevColumn ? prevColumn.fixed : null;\n      }\n\n      // >>> Create expandable column\n      var expandColumn = (_expandColumn = {}, _defineProperty(_expandColumn, INTERNAL_COL_DEFINE, {\n        className: \"\".concat(prefixCls, \"-expand-icon-col\"),\n        columnType: 'EXPAND_COLUMN'\n      }), _defineProperty(_expandColumn, \"title\", columnTitle), _defineProperty(_expandColumn, \"fixed\", fixedColumn), _defineProperty(_expandColumn, \"className\", \"\".concat(prefixCls, \"-row-expand-icon-cell\")), _defineProperty(_expandColumn, \"width\", columnWidth), _defineProperty(_expandColumn, \"render\", function render(_, record, index) {\n        var rowKey = getRowKey(record, index);\n        var expanded = expandedKeys.has(rowKey);\n        var recordExpandable = rowExpandable ? rowExpandable(record) : true;\n        var icon = expandIcon({\n          prefixCls: prefixCls,\n          expanded: expanded,\n          expandable: recordExpandable,\n          record: record,\n          onExpand: onTriggerExpand\n        });\n        if (expandRowByClick) {\n          return /*#__PURE__*/React.createElement(\"span\", {\n            onClick: function onClick(e) {\n              return e.stopPropagation();\n            }\n          }, icon);\n        }\n        return icon;\n      }), _expandColumn);\n      return cloneColumns.map(function (col) {\n        return col === EXPAND_COLUMN ? expandColumn : col;\n      });\n    }\n    if (process.env.NODE_ENV !== 'production' && baseColumns.includes(EXPAND_COLUMN)) {\n      warning(false, '`expandable` is not config but there exist `EXPAND_COLUMN` in `columns`.');\n    }\n    return baseColumns.filter(function (col) {\n      return col !== EXPAND_COLUMN;\n    });\n  }, [expandable, baseColumns, getRowKey, expandedKeys, expandIcon, direction]);\n\n  // ========================= Transform ========================\n  var mergedColumns = React.useMemo(function () {\n    var finalColumns = withExpandColumns;\n    if (transformColumns) {\n      finalColumns = transformColumns(finalColumns);\n    }\n\n    // Always provides at least one column for table display\n    if (!finalColumns.length) {\n      finalColumns = [{\n        render: function render() {\n          return null;\n        }\n      }];\n    }\n    return finalColumns;\n  }, [transformColumns, withExpandColumns, direction]);\n\n  // ========================== Flatten =========================\n  var flattenColumns = React.useMemo(function () {\n    if (direction === 'rtl') {\n      return revertForRtl(flatColumns(mergedColumns));\n    }\n    return flatColumns(mergedColumns);\n  }, [mergedColumns, direction]);\n  // Only check out of production since it's waste for each render\n  if (process.env.NODE_ENV !== 'production') {\n    warningFixed(direction === 'rtl' ? flattenColumns.slice().reverse() : flattenColumns);\n  }\n  return [mergedColumns, flattenColumns];\n}\nexport default useColumns;","map":{"version":3,"names":["_defineProperty","_toConsumableArray","_typeof","_objectSpread","_objectWithoutProperties","_excluded","_excluded2","toArray","warning","React","EXPAND_COLUMN","INTERNAL_COL_DEFINE","convertChildrenToColumns","children","filter","node","isValidElement","map","_ref","key","props","nodeChildren","restProps","column","flatColumns","columns","reduce","list","fixed","parsedFixed","subColumns","length","concat","subColum","warningFixed","flattenColumns","allFixLeft","i","col","allFixRight","_i","_col","revertForRtl","useColumns","_ref2","transformColumns","prefixCls","expandable","expandedKeys","columnTitle","getRowKey","onTriggerExpand","expandIcon","rowExpandable","expandIconColumnIndex","direction","expandRowByClick","columnWidth","baseColumns","useMemo","withExpandColumns","_expandColumn","cloneColumns","slice","process","env","NODE_ENV","includes","expandColIndex","splice","c","expandColumnIndex","indexOf","index","prevColumn","fixedColumn","expandColumn","className","columnType","render","_","record","rowKey","expanded","has","recordExpandable","icon","onExpand","createElement","onClick","e","stopPropagation","mergedColumns","finalColumns","reverse"],"sources":["/Users/hamsterpapa/Desktop/ENS/Wallet-browser-extension/mwallet/node_modules/rc-table/es/hooks/useColumns.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\"],\n  _excluded2 = [\"fixed\"];\nimport toArray from \"rc-util/es/Children/toArray\";\nimport warning from \"rc-util/es/warning\";\nimport * as React from 'react';\nimport { EXPAND_COLUMN } from \"../constant\";\nimport { INTERNAL_COL_DEFINE } from \"../utils/legacyUtil\";\nexport function convertChildrenToColumns(children) {\n  return toArray(children).filter(function (node) {\n    return /*#__PURE__*/React.isValidElement(node);\n  }).map(function (_ref) {\n    var key = _ref.key,\n      props = _ref.props;\n    var nodeChildren = props.children,\n      restProps = _objectWithoutProperties(props, _excluded);\n    var column = _objectSpread({\n      key: key\n    }, restProps);\n    if (nodeChildren) {\n      column.children = convertChildrenToColumns(nodeChildren);\n    }\n    return column;\n  });\n}\nfunction flatColumns(columns) {\n  return columns.filter(function (column) {\n    return column && _typeof(column) === 'object';\n  }).reduce(function (list, column) {\n    var fixed = column.fixed;\n    // Convert `fixed='true'` to `fixed='left'` instead\n    var parsedFixed = fixed === true ? 'left' : fixed;\n    var subColumns = column.children;\n    if (subColumns && subColumns.length > 0) {\n      return [].concat(_toConsumableArray(list), _toConsumableArray(flatColumns(subColumns).map(function (subColum) {\n        return _objectSpread({\n          fixed: parsedFixed\n        }, subColum);\n      })));\n    }\n    return [].concat(_toConsumableArray(list), [_objectSpread(_objectSpread({}, column), {}, {\n      fixed: parsedFixed\n    })]);\n  }, []);\n}\nfunction warningFixed(flattenColumns) {\n  var allFixLeft = true;\n  for (var i = 0; i < flattenColumns.length; i += 1) {\n    var col = flattenColumns[i];\n    if (allFixLeft && col.fixed !== 'left') {\n      allFixLeft = false;\n    } else if (!allFixLeft && col.fixed === 'left') {\n      warning(false, \"Index \".concat(i - 1, \" of `columns` missing `fixed='left'` prop.\"));\n      break;\n    }\n  }\n  var allFixRight = true;\n  for (var _i = flattenColumns.length - 1; _i >= 0; _i -= 1) {\n    var _col = flattenColumns[_i];\n    if (allFixRight && _col.fixed !== 'right') {\n      allFixRight = false;\n    } else if (!allFixRight && _col.fixed === 'right') {\n      warning(false, \"Index \".concat(_i + 1, \" of `columns` missing `fixed='right'` prop.\"));\n      break;\n    }\n  }\n}\nfunction revertForRtl(columns) {\n  return columns.map(function (column) {\n    var fixed = column.fixed,\n      restProps = _objectWithoutProperties(column, _excluded2);\n\n    // Convert `fixed='left'` to `fixed='right'` instead\n    var parsedFixed = fixed;\n    if (fixed === 'left') {\n      parsedFixed = 'right';\n    } else if (fixed === 'right') {\n      parsedFixed = 'left';\n    }\n    return _objectSpread({\n      fixed: parsedFixed\n    }, restProps);\n  });\n}\n\n/**\n * Parse `columns` & `children` into `columns`.\n */\nfunction useColumns(_ref2, transformColumns) {\n  var prefixCls = _ref2.prefixCls,\n    columns = _ref2.columns,\n    children = _ref2.children,\n    expandable = _ref2.expandable,\n    expandedKeys = _ref2.expandedKeys,\n    columnTitle = _ref2.columnTitle,\n    getRowKey = _ref2.getRowKey,\n    onTriggerExpand = _ref2.onTriggerExpand,\n    expandIcon = _ref2.expandIcon,\n    rowExpandable = _ref2.rowExpandable,\n    expandIconColumnIndex = _ref2.expandIconColumnIndex,\n    direction = _ref2.direction,\n    expandRowByClick = _ref2.expandRowByClick,\n    columnWidth = _ref2.columnWidth,\n    fixed = _ref2.fixed;\n  var baseColumns = React.useMemo(function () {\n    return columns || convertChildrenToColumns(children);\n  }, [columns, children]);\n\n  // ========================== Expand ==========================\n  var withExpandColumns = React.useMemo(function () {\n    if (expandable) {\n      var _expandColumn;\n      var cloneColumns = baseColumns.slice();\n\n      // >>> Warning if use `expandIconColumnIndex`\n      if (process.env.NODE_ENV !== 'production' && expandIconColumnIndex >= 0) {\n        warning(false, '`expandIconColumnIndex` is deprecated. Please use `Table.EXPAND_COLUMN` in `columns` instead.');\n      }\n\n      // >>> Insert expand column if not exist\n      if (!cloneColumns.includes(EXPAND_COLUMN)) {\n        var expandColIndex = expandIconColumnIndex || 0;\n        if (expandColIndex >= 0) {\n          cloneColumns.splice(expandColIndex, 0, EXPAND_COLUMN);\n        }\n      }\n\n      // >>> Deduplicate additional expand column\n      if (process.env.NODE_ENV !== 'production' && cloneColumns.filter(function (c) {\n        return c === EXPAND_COLUMN;\n      }).length > 1) {\n        warning(false, 'There exist more than one `EXPAND_COLUMN` in `columns`.');\n      }\n      var expandColumnIndex = cloneColumns.indexOf(EXPAND_COLUMN);\n      cloneColumns = cloneColumns.filter(function (column, index) {\n        return column !== EXPAND_COLUMN || index === expandColumnIndex;\n      });\n\n      // >>> Check if expand column need to fixed\n      var prevColumn = baseColumns[expandColumnIndex];\n      var fixedColumn;\n      if ((fixed === 'left' || fixed) && !expandIconColumnIndex) {\n        fixedColumn = 'left';\n      } else if ((fixed === 'right' || fixed) && expandIconColumnIndex === baseColumns.length) {\n        fixedColumn = 'right';\n      } else {\n        fixedColumn = prevColumn ? prevColumn.fixed : null;\n      }\n\n      // >>> Create expandable column\n      var expandColumn = (_expandColumn = {}, _defineProperty(_expandColumn, INTERNAL_COL_DEFINE, {\n        className: \"\".concat(prefixCls, \"-expand-icon-col\"),\n        columnType: 'EXPAND_COLUMN'\n      }), _defineProperty(_expandColumn, \"title\", columnTitle), _defineProperty(_expandColumn, \"fixed\", fixedColumn), _defineProperty(_expandColumn, \"className\", \"\".concat(prefixCls, \"-row-expand-icon-cell\")), _defineProperty(_expandColumn, \"width\", columnWidth), _defineProperty(_expandColumn, \"render\", function render(_, record, index) {\n        var rowKey = getRowKey(record, index);\n        var expanded = expandedKeys.has(rowKey);\n        var recordExpandable = rowExpandable ? rowExpandable(record) : true;\n        var icon = expandIcon({\n          prefixCls: prefixCls,\n          expanded: expanded,\n          expandable: recordExpandable,\n          record: record,\n          onExpand: onTriggerExpand\n        });\n        if (expandRowByClick) {\n          return /*#__PURE__*/React.createElement(\"span\", {\n            onClick: function onClick(e) {\n              return e.stopPropagation();\n            }\n          }, icon);\n        }\n        return icon;\n      }), _expandColumn);\n      return cloneColumns.map(function (col) {\n        return col === EXPAND_COLUMN ? expandColumn : col;\n      });\n    }\n    if (process.env.NODE_ENV !== 'production' && baseColumns.includes(EXPAND_COLUMN)) {\n      warning(false, '`expandable` is not config but there exist `EXPAND_COLUMN` in `columns`.');\n    }\n    return baseColumns.filter(function (col) {\n      return col !== EXPAND_COLUMN;\n    });\n  }, [expandable, baseColumns, getRowKey, expandedKeys, expandIcon, direction]);\n\n  // ========================= Transform ========================\n  var mergedColumns = React.useMemo(function () {\n    var finalColumns = withExpandColumns;\n    if (transformColumns) {\n      finalColumns = transformColumns(finalColumns);\n    }\n\n    // Always provides at least one column for table display\n    if (!finalColumns.length) {\n      finalColumns = [{\n        render: function render() {\n          return null;\n        }\n      }];\n    }\n    return finalColumns;\n  }, [transformColumns, withExpandColumns, direction]);\n\n  // ========================== Flatten =========================\n  var flattenColumns = React.useMemo(function () {\n    if (direction === 'rtl') {\n      return revertForRtl(flatColumns(mergedColumns));\n    }\n    return flatColumns(mergedColumns);\n  }, [mergedColumns, direction]);\n  // Only check out of production since it's waste for each render\n  if (process.env.NODE_ENV !== 'production') {\n    warningFixed(direction === 'rtl' ? flattenColumns.slice().reverse() : flattenColumns);\n  }\n  return [mergedColumns, flattenColumns];\n}\nexport default useColumns;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}