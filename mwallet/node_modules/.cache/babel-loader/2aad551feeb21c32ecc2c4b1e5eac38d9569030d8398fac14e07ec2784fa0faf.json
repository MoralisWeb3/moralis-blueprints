{"ast":null,"code":"import assert from './_assert.js';\nimport u64 from './_u64.js';\nimport { Hash, u32, toBytes, wrapConstructor, wrapConstructorWithOpts } from './utils.js';\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x));\n  // Rotational\n  SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);\n  // Iota\n  let t = _0n;\n  for (let j = 0; j < 7; j++) {\n    R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;\n    if (R & _2n) t ^= _1n << (_1n << BigInt(j)) - _1n;\n  }\n  _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = u64.split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => s > 32 ? u64.rotlBH(h, l, s) : u64.rotlSH(h, l, s);\nconst rotlL = (h, l, s) => s > 32 ? u64.rotlBL(h, l, s) : u64.rotlSL(h, l, s);\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s, rounds = 24) {\n  const B = new Uint32Array(5 * 2);\n  // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n  for (let round = 24 - rounds; round < 24; round++) {\n    // Theta θ\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    }\n    // Rho (ρ) and Pi (π)\n    let curH = s[2];\n    let curL = s[3];\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    }\n    // Chi (χ)\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    }\n    // Iota (ι)\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n  B.fill(0);\n}\nexport class Keccak extends Hash {\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n    super();\n    this.blockLen = blockLen;\n    this.suffix = suffix;\n    this.outputLen = outputLen;\n    this.enableXOF = enableXOF;\n    this.rounds = rounds;\n    this.pos = 0;\n    this.posOut = 0;\n    this.finished = false;\n    this.destroyed = false;\n    // Can be passed from user as dkLen\n    assert.number(outputLen);\n    // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n    if (0 >= this.blockLen || this.blockLen >= 200) throw new Error('Sha3 supports only keccak-f1600 function');\n    this.state = new Uint8Array(200);\n    this.state32 = u32(this.state);\n  }\n  keccak() {\n    keccakP(this.state32, this.rounds);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n  update(data) {\n    assert.exists(this);\n    const {\n      blockLen,\n      state\n    } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len;) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n      if (this.pos === blockLen) this.keccak();\n    }\n    return this;\n  }\n  finish() {\n    if (this.finished) return;\n    this.finished = true;\n    const {\n      state,\n      suffix,\n      pos,\n      blockLen\n    } = this;\n    // Do the padding\n    state[pos] ^= suffix;\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n    state[blockLen - 1] ^= 0x80;\n    this.keccak();\n  }\n  writeInto(out) {\n    assert.exists(this, false);\n    assert.bytes(out);\n    this.finish();\n    const bufferOut = this.state;\n    const {\n      blockLen\n    } = this;\n    for (let pos = 0, len = out.length; pos < len;) {\n      if (this.posOut >= blockLen) this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n    return out;\n  }\n  xofInto(out) {\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n    return this.writeInto(out);\n  }\n  xof(bytes) {\n    assert.number(bytes);\n    return this.xofInto(new Uint8Array(bytes));\n  }\n  digestInto(out) {\n    assert.output(out, this);\n    if (this.finished) throw new Error('digest() was already called');\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n  digest() {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n  destroy() {\n    this.destroyed = true;\n    this.state.fill(0);\n  }\n  _cloneInto(to) {\n    const {\n      blockLen,\n      suffix,\n      outputLen,\n      rounds,\n      enableXOF\n    } = this;\n    to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds;\n    // Suffix can change in cSHAKE\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n}\nconst gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\nexport const sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = gen(0x06, 136, 256 / 8);\nexport const sha3_384 = gen(0x06, 104, 384 / 8);\nexport const sha3_512 = gen(0x06, 72, 512 / 8);\nexport const keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = gen(0x01, 136, 256 / 8);\nexport const keccak_384 = gen(0x01, 104, 384 / 8);\nexport const keccak_512 = gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => wrapConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexport const shake128 = genShake(0x1f, 168, 128 / 8);\nexport const shake256 = genShake(0x1f, 136, 256 / 8);","map":{"version":3,"names":["assert","u64","Hash","u32","toBytes","wrapConstructor","wrapConstructorWithOpts","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_0n","BigInt","_1n","_2n","_7n","_256n","_0x71n","round","R","x","y","push","t","j","SHA3_IOTA_H","SHA3_IOTA_L","split","rotlH","h","l","s","rotlBH","rotlSH","rotlL","rotlBL","rotlSL","keccakP","rounds","B","Uint32Array","idx1","idx0","B0","B1","Th","Tl","curH","curL","shift","PI","fill","Keccak","constructor","blockLen","suffix","outputLen","enableXOF","pos","posOut","finished","destroyed","number","Error","state","Uint8Array","state32","keccak","update","data","exists","len","length","take","Math","min","i","finish","writeInto","out","bytes","bufferOut","set","subarray","xofInto","xof","digestInto","output","destroy","digest","_cloneInto","to","gen","sha3_224","sha3_256","sha3_384","sha3_512","keccak_224","keccak_256","keccak_384","keccak_512","genShake","opts","dkLen","undefined","shake128","shake256"],"sources":["/Users/hamsterpapa/Desktop/ENS/Wallet-browser-extension/mwallet/node_modules/@noble/hashes/esm/sha3.js"],"sourcesContent":["import assert from './_assert.js';\nimport u64 from './_u64.js';\nimport { Hash, u32, toBytes, wrapConstructor, wrapConstructorWithOpts, } from './utils.js';\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = u64.split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => s > 32 ? u64.rotlBH(h, l, s) : u64.rotlSH(h, l, s);\nconst rotlL = (h, l, s) => s > 32 ? u64.rotlBL(h, l, s) : u64.rotlSL(h, l, s);\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexport class Keccak extends Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        assert.number(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = u32(this.state);\n    }\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        assert.exists(this);\n        const { blockLen, state } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        assert.exists(this, false);\n        assert.bytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        assert.number(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        assert.output(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nconst gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\nexport const sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = gen(0x06, 136, 256 / 8);\nexport const sha3_384 = gen(0x06, 104, 384 / 8);\nexport const sha3_512 = gen(0x06, 72, 512 / 8);\nexport const keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = gen(0x01, 136, 256 / 8);\nexport const keccak_384 = gen(0x01, 104, 384 / 8);\nexport const keccak_512 = gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => wrapConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexport const shake128 = genShake(0x1f, 168, 128 / 8);\nexport const shake256 = genShake(0x1f, 136, 256 / 8);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}