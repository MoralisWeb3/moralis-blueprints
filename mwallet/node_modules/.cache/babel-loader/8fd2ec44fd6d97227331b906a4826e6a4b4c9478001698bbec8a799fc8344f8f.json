{"ast":null,"code":"import assert from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nclass HMAC extends Hash {\n  constructor(hash, _key) {\n    super();\n    this.finished = false;\n    this.destroyed = false;\n    assert.hash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create();\n    if (!(this.iHash instanceof Hash)) throw new TypeError('Expected instance of class which extends utils.Hash');\n    const blockLen = this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > this.iHash.blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create();\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf) {\n    assert.exists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out) {\n    assert.exists(this);\n    assert.bytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to) {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to || (to = Object.create(Object.getPrototypeOf(this), {}));\n    const {\n      oHash,\n      iHash,\n      finished,\n      destroyed,\n      blockLen,\n      outputLen\n    } = this;\n    to = to;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);","map":{"version":3,"names":["assert","Hash","toBytes","HMAC","constructor","hash","_key","finished","destroyed","key","iHash","create","TypeError","blockLen","outputLen","pad","Uint8Array","set","length","update","digest","i","oHash","fill","buf","exists","digestInto","out","bytes","destroy","_cloneInto","to","Object","getPrototypeOf","hmac","message"],"sources":["/Users/hamsterpapa/Desktop/ENS/Wallet-browser-extension/mwallet/node_modules/@noble/hashes/esm/hmac.js"],"sourcesContent":["import assert from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nclass HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assert.hash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (!(this.iHash instanceof Hash))\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        const blockLen = (this.blockLen = this.iHash.blockLen);\n        this.outputLen = this.iHash.outputLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > this.iHash.blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assert.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}