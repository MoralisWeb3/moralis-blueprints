{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport DownOutlined from \"@ant-design/icons/es/icons/DownOutlined\";\nimport classNames from 'classnames';\nimport { INTERNAL_COL_DEFINE } from 'rc-table';\nimport { arrAdd, arrDel } from \"rc-tree/es/util\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport * as React from 'react';\nimport { useCallback, useMemo, useState } from 'react';\nimport warning from '../../_util/warning';\nimport Checkbox from '../../checkbox';\nimport Dropdown from '../../dropdown';\nimport Radio from '../../radio';\n// TODO: warning if use ajax!!!\nexport const SELECTION_COLUMN = {};\nexport const SELECTION_ALL = 'SELECT_ALL';\nexport const SELECTION_INVERT = 'SELECT_INVERT';\nexport const SELECTION_NONE = 'SELECT_NONE';\nconst EMPTY_LIST = [];\nconst flattenData = (childrenColumnName, data) => {\n  let list = [];\n  (data || []).forEach(record => {\n    list.push(record);\n    if (record && typeof record === 'object' && childrenColumnName in record) {\n      list = [].concat(_toConsumableArray(list), _toConsumableArray(flattenData(childrenColumnName, record[childrenColumnName])));\n    }\n  });\n  return list;\n};\nconst useSelection = (config, rowSelection) => {\n  const {\n    preserveSelectedRowKeys,\n    selectedRowKeys,\n    defaultSelectedRowKeys,\n    getCheckboxProps,\n    onChange: onSelectionChange,\n    onSelect,\n    onSelectAll,\n    onSelectInvert,\n    onSelectNone,\n    onSelectMultiple,\n    columnWidth: selectionColWidth,\n    type: selectionType,\n    selections,\n    fixed,\n    renderCell: customizeRenderCell,\n    hideSelectAll,\n    checkStrictly = true\n  } = rowSelection || {};\n  const {\n    prefixCls,\n    data,\n    pageData,\n    getRecordByKey,\n    getRowKey,\n    expandType,\n    childrenColumnName,\n    locale: tableLocale,\n    getPopupContainer\n  } = config;\n  // ========================= Keys =========================\n  const [mergedSelectedKeys, setMergedSelectedKeys] = useMergedState(selectedRowKeys || defaultSelectedRowKeys || EMPTY_LIST, {\n    value: selectedRowKeys\n  });\n  // ======================== Caches ========================\n  const preserveRecordsRef = React.useRef(new Map());\n  const updatePreserveRecordsCache = useCallback(keys => {\n    if (preserveSelectedRowKeys) {\n      const newCache = new Map();\n      // Keep key if mark as preserveSelectedRowKeys\n      keys.forEach(key => {\n        let record = getRecordByKey(key);\n        if (!record && preserveRecordsRef.current.has(key)) {\n          record = preserveRecordsRef.current.get(key);\n        }\n        newCache.set(key, record);\n      });\n      // Refresh to new cache\n      preserveRecordsRef.current = newCache;\n    }\n  }, [getRecordByKey, preserveSelectedRowKeys]);\n  // Update cache with selectedKeys\n  React.useEffect(() => {\n    updatePreserveRecordsCache(mergedSelectedKeys);\n  }, [mergedSelectedKeys]);\n  const {\n    keyEntities\n  } = useMemo(() => {\n    if (checkStrictly) {\n      return {\n        keyEntities: null\n      };\n    }\n    let convertData = data;\n    if (preserveSelectedRowKeys) {\n      const keysSet = new Set(data.map((record, index) => getRowKey(record, index)));\n      // remove preserveRecords that duplicate data\n      const preserveRecords = Array.from(preserveRecordsRef.current).reduce((total, _ref) => {\n        let [key, value] = _ref;\n        return keysSet.has(key) ? total : total.concat(value);\n      }, []);\n      convertData = [].concat(_toConsumableArray(convertData), _toConsumableArray(preserveRecords));\n    }\n    return convertDataToEntities(convertData, {\n      externalGetKey: getRowKey,\n      childrenPropName: childrenColumnName\n    });\n  }, [data, getRowKey, checkStrictly, childrenColumnName, preserveSelectedRowKeys]);\n  // Get flatten data\n  const flattedData = useMemo(() => flattenData(childrenColumnName, pageData), [childrenColumnName, pageData]);\n  // Get all checkbox props\n  const checkboxPropsMap = useMemo(() => {\n    const map = new Map();\n    flattedData.forEach((record, index) => {\n      const key = getRowKey(record, index);\n      const checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};\n      map.set(key, checkboxProps);\n      process.env.NODE_ENV !== \"production\" ? warning(!('checked' in checkboxProps || 'defaultChecked' in checkboxProps), 'Table', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.') : void 0;\n    });\n    return map;\n  }, [flattedData, getRowKey, getCheckboxProps]);\n  const isCheckboxDisabled = useCallback(r => {\n    var _a;\n    return !!((_a = checkboxPropsMap.get(getRowKey(r))) === null || _a === void 0 ? void 0 : _a.disabled);\n  }, [checkboxPropsMap, getRowKey]);\n  const [derivedSelectedKeys, derivedHalfSelectedKeys] = useMemo(() => {\n    if (checkStrictly) {\n      return [mergedSelectedKeys || [], []];\n    }\n    const {\n      checkedKeys,\n      halfCheckedKeys\n    } = conductCheck(mergedSelectedKeys, true, keyEntities, isCheckboxDisabled);\n    return [checkedKeys || [], halfCheckedKeys];\n  }, [mergedSelectedKeys, checkStrictly, keyEntities, isCheckboxDisabled]);\n  const derivedSelectedKeySet = useMemo(() => {\n    const keys = selectionType === 'radio' ? derivedSelectedKeys.slice(0, 1) : derivedSelectedKeys;\n    return new Set(keys);\n  }, [derivedSelectedKeys, selectionType]);\n  const derivedHalfSelectedKeySet = useMemo(() => selectionType === 'radio' ? new Set() : new Set(derivedHalfSelectedKeys), [derivedHalfSelectedKeys, selectionType]);\n  // Save last selected key to enable range selection\n  const [lastSelectedKey, setLastSelectedKey] = useState(null);\n  // Reset if rowSelection reset\n  React.useEffect(() => {\n    if (!rowSelection) {\n      setMergedSelectedKeys(EMPTY_LIST);\n    }\n  }, [!!rowSelection]);\n  const setSelectedKeys = useCallback((keys, method) => {\n    let availableKeys;\n    let records;\n    updatePreserveRecordsCache(keys);\n    if (preserveSelectedRowKeys) {\n      availableKeys = keys;\n      records = keys.map(key => preserveRecordsRef.current.get(key));\n    } else {\n      // Filter key which not exist in the `dataSource`\n      availableKeys = [];\n      records = [];\n      keys.forEach(key => {\n        const record = getRecordByKey(key);\n        if (record !== undefined) {\n          availableKeys.push(key);\n          records.push(record);\n        }\n      });\n    }\n    setMergedSelectedKeys(availableKeys);\n    onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(availableKeys, records, {\n      type: method\n    });\n  }, [setMergedSelectedKeys, getRecordByKey, onSelectionChange, preserveSelectedRowKeys]);\n  // ====================== Selections ======================\n  // Trigger single `onSelect` event\n  const triggerSingleSelection = useCallback((key, selected, keys, event) => {\n    if (onSelect) {\n      const rows = keys.map(k => getRecordByKey(k));\n      onSelect(getRecordByKey(key), selected, rows, event);\n    }\n    setSelectedKeys(keys, 'single');\n  }, [onSelect, getRecordByKey, setSelectedKeys]);\n  const mergedSelections = useMemo(() => {\n    if (!selections || hideSelectAll) {\n      return null;\n    }\n    const selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE] : selections;\n    return selectionList.map(selection => {\n      if (selection === SELECTION_ALL) {\n        return {\n          key: 'all',\n          text: tableLocale.selectionAll,\n          onSelect() {\n            setSelectedKeys(data.map((record, index) => getRowKey(record, index)).filter(key => {\n              const checkProps = checkboxPropsMap.get(key);\n              return !(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled) || derivedSelectedKeySet.has(key);\n            }), 'all');\n          }\n        };\n      }\n      if (selection === SELECTION_INVERT) {\n        return {\n          key: 'invert',\n          text: tableLocale.selectInvert,\n          onSelect() {\n            const keySet = new Set(derivedSelectedKeySet);\n            pageData.forEach((record, index) => {\n              const key = getRowKey(record, index);\n              const checkProps = checkboxPropsMap.get(key);\n              if (!(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled)) {\n                if (keySet.has(key)) {\n                  keySet.delete(key);\n                } else {\n                  keySet.add(key);\n                }\n              }\n            });\n            const keys = Array.from(keySet);\n            if (onSelectInvert) {\n              process.env.NODE_ENV !== \"production\" ? warning(false, 'Table', '`onSelectInvert` will be removed in future. Please use `onChange` instead.') : void 0;\n              onSelectInvert(keys);\n            }\n            setSelectedKeys(keys, 'invert');\n          }\n        };\n      }\n      if (selection === SELECTION_NONE) {\n        return {\n          key: 'none',\n          text: tableLocale.selectNone,\n          onSelect() {\n            onSelectNone === null || onSelectNone === void 0 ? void 0 : onSelectNone();\n            setSelectedKeys(Array.from(derivedSelectedKeySet).filter(key => {\n              const checkProps = checkboxPropsMap.get(key);\n              return checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled;\n            }), 'none');\n          }\n        };\n      }\n      return selection;\n    }).map(selection => Object.assign(Object.assign({}, selection), {\n      onSelect: function () {\n        var _a2;\n        var _a;\n        for (var _len = arguments.length, rest = new Array(_len), _key = 0; _key < _len; _key++) {\n          rest[_key] = arguments[_key];\n        }\n        (_a = selection.onSelect) === null || _a === void 0 ? void 0 : (_a2 = _a).call.apply(_a2, [selection].concat(rest));\n        setLastSelectedKey(null);\n      }\n    }));\n  }, [selections, derivedSelectedKeySet, pageData, getRowKey, onSelectInvert, setSelectedKeys]);\n  // ======================= Columns ========================\n  const transformColumns = useCallback(columns => {\n    var _a;\n    // >>>>>>>>>>> Skip if not exists `rowSelection`\n    if (!rowSelection) {\n      process.env.NODE_ENV !== \"production\" ? warning(!columns.includes(SELECTION_COLUMN), 'Table', '`rowSelection` is not config but `SELECTION_COLUMN` exists in the `columns`.') : void 0;\n      return columns.filter(col => col !== SELECTION_COLUMN);\n    }\n    // >>>>>>>>>>> Support selection\n    let cloneColumns = _toConsumableArray(columns);\n    const keySet = new Set(derivedSelectedKeySet);\n    // Record key only need check with enabled\n    const recordKeys = flattedData.map(getRowKey).filter(key => !checkboxPropsMap.get(key).disabled);\n    const checkedCurrentAll = recordKeys.every(key => keySet.has(key));\n    const checkedCurrentSome = recordKeys.some(key => keySet.has(key));\n    const onSelectAllChange = () => {\n      const changeKeys = [];\n      if (checkedCurrentAll) {\n        recordKeys.forEach(key => {\n          keySet.delete(key);\n          changeKeys.push(key);\n        });\n      } else {\n        recordKeys.forEach(key => {\n          if (!keySet.has(key)) {\n            keySet.add(key);\n            changeKeys.push(key);\n          }\n        });\n      }\n      const keys = Array.from(keySet);\n      onSelectAll === null || onSelectAll === void 0 ? void 0 : onSelectAll(!checkedCurrentAll, keys.map(k => getRecordByKey(k)), changeKeys.map(k => getRecordByKey(k)));\n      setSelectedKeys(keys, 'all');\n      setLastSelectedKey(null);\n    };\n    // ===================== Render =====================\n    // Title Cell\n    let title;\n    if (selectionType !== 'radio') {\n      let customizeSelections;\n      if (mergedSelections) {\n        const menu = {\n          getPopupContainer,\n          items: mergedSelections.map((selection, index) => {\n            const {\n              key,\n              text,\n              onSelect: onSelectionClick\n            } = selection;\n            return {\n              key: key !== null && key !== void 0 ? key : index,\n              onClick: () => {\n                onSelectionClick === null || onSelectionClick === void 0 ? void 0 : onSelectionClick(recordKeys);\n              },\n              label: text\n            };\n          })\n        };\n        customizeSelections = /*#__PURE__*/React.createElement(\"div\", {\n          className: `${prefixCls}-selection-extra`\n        }, /*#__PURE__*/React.createElement(Dropdown, {\n          menu: menu,\n          getPopupContainer: getPopupContainer\n        }, /*#__PURE__*/React.createElement(\"span\", null, /*#__PURE__*/React.createElement(DownOutlined, null))));\n      }\n      const allDisabledData = flattedData.map((record, index) => {\n        const key = getRowKey(record, index);\n        const checkboxProps = checkboxPropsMap.get(key) || {};\n        return Object.assign({\n          checked: keySet.has(key)\n        }, checkboxProps);\n      }).filter(_ref2 => {\n        let {\n          disabled\n        } = _ref2;\n        return disabled;\n      });\n      const allDisabled = !!allDisabledData.length && allDisabledData.length === flattedData.length;\n      const allDisabledAndChecked = allDisabled && allDisabledData.every(_ref3 => {\n        let {\n          checked\n        } = _ref3;\n        return checked;\n      });\n      const allDisabledSomeChecked = allDisabled && allDisabledData.some(_ref4 => {\n        let {\n          checked\n        } = _ref4;\n        return checked;\n      });\n      title = !hideSelectAll && /*#__PURE__*/React.createElement(\"div\", {\n        className: `${prefixCls}-selection`\n      }, /*#__PURE__*/React.createElement(Checkbox, {\n        checked: !allDisabled ? !!flattedData.length && checkedCurrentAll : allDisabledAndChecked,\n        indeterminate: !allDisabled ? !checkedCurrentAll && checkedCurrentSome : !allDisabledAndChecked && allDisabledSomeChecked,\n        onChange: onSelectAllChange,\n        disabled: flattedData.length === 0 || allDisabled,\n        \"aria-label\": customizeSelections ? 'Custom selection' : 'Select all',\n        skipGroup: true\n      }), customizeSelections);\n    }\n    // Body Cell\n    let renderCell;\n    if (selectionType === 'radio') {\n      renderCell = (_, record, index) => {\n        const key = getRowKey(record, index);\n        const checked = keySet.has(key);\n        return {\n          node: /*#__PURE__*/React.createElement(Radio, Object.assign({}, checkboxPropsMap.get(key), {\n            checked: checked,\n            onClick: e => e.stopPropagation(),\n            onChange: event => {\n              if (!keySet.has(key)) {\n                triggerSingleSelection(key, true, [key], event.nativeEvent);\n              }\n            }\n          })),\n          checked\n        };\n      };\n    } else {\n      renderCell = (_, record, index) => {\n        var _a;\n        const key = getRowKey(record, index);\n        const checked = keySet.has(key);\n        const indeterminate = derivedHalfSelectedKeySet.has(key);\n        const checkboxProps = checkboxPropsMap.get(key);\n        let mergedIndeterminate;\n        if (expandType === 'nest') {\n          mergedIndeterminate = indeterminate;\n          process.env.NODE_ENV !== \"production\" ? warning(typeof (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== 'boolean', 'Table', 'set `indeterminate` using `rowSelection.getCheckboxProps` is not allowed with tree structured dataSource.') : void 0;\n        } else {\n          mergedIndeterminate = (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== null && _a !== void 0 ? _a : indeterminate;\n        }\n        // Record checked\n        return {\n          node: /*#__PURE__*/React.createElement(Checkbox, Object.assign({}, checkboxProps, {\n            indeterminate: mergedIndeterminate,\n            checked: checked,\n            skipGroup: true,\n            onClick: e => e.stopPropagation(),\n            onChange: _ref5 => {\n              let {\n                nativeEvent\n              } = _ref5;\n              const {\n                shiftKey\n              } = nativeEvent;\n              let startIndex = -1;\n              let endIndex = -1;\n              // Get range of this\n              if (shiftKey && checkStrictly) {\n                const pointKeys = new Set([lastSelectedKey, key]);\n                recordKeys.some((recordKey, recordIndex) => {\n                  if (pointKeys.has(recordKey)) {\n                    if (startIndex === -1) {\n                      startIndex = recordIndex;\n                    } else {\n                      endIndex = recordIndex;\n                      return true;\n                    }\n                  }\n                  return false;\n                });\n              }\n              if (endIndex !== -1 && startIndex !== endIndex && checkStrictly) {\n                // Batch update selections\n                const rangeKeys = recordKeys.slice(startIndex, endIndex + 1);\n                const changedKeys = [];\n                if (checked) {\n                  rangeKeys.forEach(recordKey => {\n                    if (keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.delete(recordKey);\n                    }\n                  });\n                } else {\n                  rangeKeys.forEach(recordKey => {\n                    if (!keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.add(recordKey);\n                    }\n                  });\n                }\n                const keys = Array.from(keySet);\n                onSelectMultiple === null || onSelectMultiple === void 0 ? void 0 : onSelectMultiple(!checked, keys.map(recordKey => getRecordByKey(recordKey)), changedKeys.map(recordKey => getRecordByKey(recordKey)));\n                setSelectedKeys(keys, 'multiple');\n              } else {\n                // Single record selected\n                const originCheckedKeys = derivedSelectedKeys;\n                if (checkStrictly) {\n                  const checkedKeys = checked ? arrDel(originCheckedKeys, key) : arrAdd(originCheckedKeys, key);\n                  triggerSingleSelection(key, !checked, checkedKeys, nativeEvent);\n                } else {\n                  // Always fill first\n                  const result = conductCheck([].concat(_toConsumableArray(originCheckedKeys), [key]), true, keyEntities, isCheckboxDisabled);\n                  const {\n                    checkedKeys,\n                    halfCheckedKeys\n                  } = result;\n                  let nextCheckedKeys = checkedKeys;\n                  // If remove, we do it again to correction\n                  if (checked) {\n                    const tempKeySet = new Set(checkedKeys);\n                    tempKeySet.delete(key);\n                    nextCheckedKeys = conductCheck(Array.from(tempKeySet), {\n                      checked: false,\n                      halfCheckedKeys\n                    }, keyEntities, isCheckboxDisabled).checkedKeys;\n                  }\n                  triggerSingleSelection(key, !checked, nextCheckedKeys, nativeEvent);\n                }\n              }\n              if (checked) {\n                setLastSelectedKey(null);\n              } else {\n                setLastSelectedKey(key);\n              }\n            }\n          })),\n          checked\n        };\n      };\n    }\n    const renderSelectionCell = (_, record, index) => {\n      const {\n        node,\n        checked\n      } = renderCell(_, record, index);\n      if (customizeRenderCell) {\n        return customizeRenderCell(checked, record, index, node);\n      }\n      return node;\n    };\n    // Insert selection column if not exist\n    if (!cloneColumns.includes(SELECTION_COLUMN)) {\n      // Always after expand icon\n      if (cloneColumns.findIndex(col => {\n        var _a;\n        return ((_a = col[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN';\n      }) === 0) {\n        const [expandColumn, ...restColumns] = cloneColumns;\n        cloneColumns = [expandColumn, SELECTION_COLUMN].concat(_toConsumableArray(restColumns));\n      } else {\n        // Normal insert at first column\n        cloneColumns = [SELECTION_COLUMN].concat(_toConsumableArray(cloneColumns));\n      }\n    }\n    // Deduplicate selection column\n    const selectionColumnIndex = cloneColumns.indexOf(SELECTION_COLUMN);\n    process.env.NODE_ENV !== \"production\" ? warning(cloneColumns.filter(col => col === SELECTION_COLUMN).length <= 1, 'Table', 'Multiple `SELECTION_COLUMN` exist in `columns`.') : void 0;\n    cloneColumns = cloneColumns.filter((column, index) => column !== SELECTION_COLUMN || index === selectionColumnIndex);\n    // Fixed column logic\n    const prevCol = cloneColumns[selectionColumnIndex - 1];\n    const nextCol = cloneColumns[selectionColumnIndex + 1];\n    let mergedFixed = fixed;\n    if (mergedFixed === undefined) {\n      if ((nextCol === null || nextCol === void 0 ? void 0 : nextCol.fixed) !== undefined) {\n        mergedFixed = nextCol.fixed;\n      } else if ((prevCol === null || prevCol === void 0 ? void 0 : prevCol.fixed) !== undefined) {\n        mergedFixed = prevCol.fixed;\n      }\n    }\n    if (mergedFixed && prevCol && ((_a = prevCol[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN' && prevCol.fixed === undefined) {\n      prevCol.fixed = mergedFixed;\n    }\n    const columnCls = classNames(`${prefixCls}-selection-col`, {\n      [`${prefixCls}-selection-col-with-dropdown`]: selections && selectionType === 'checkbox'\n    });\n    // Replace with real selection column\n    const selectionColumn = {\n      fixed: mergedFixed,\n      width: selectionColWidth,\n      className: `${prefixCls}-selection-column`,\n      title: rowSelection.columnTitle || title,\n      render: renderSelectionCell,\n      onCell: rowSelection.onCell,\n      [INTERNAL_COL_DEFINE]: {\n        className: columnCls\n      }\n    };\n    return cloneColumns.map(col => col === SELECTION_COLUMN ? selectionColumn : col);\n  }, [getRowKey, flattedData, rowSelection, derivedSelectedKeys, derivedSelectedKeySet, derivedHalfSelectedKeySet, selectionColWidth, mergedSelections, expandType, lastSelectedKey, checkboxPropsMap, onSelectMultiple, triggerSingleSelection, isCheckboxDisabled]);\n  return [transformColumns, derivedSelectedKeySet];\n};\nexport default useSelection;","map":{"version":3,"names":["_toConsumableArray","DownOutlined","classNames","INTERNAL_COL_DEFINE","arrAdd","arrDel","conductCheck","convertDataToEntities","useMergedState","React","useCallback","useMemo","useState","warning","Checkbox","Dropdown","Radio","SELECTION_COLUMN","SELECTION_ALL","SELECTION_INVERT","SELECTION_NONE","EMPTY_LIST","flattenData","childrenColumnName","data","list","forEach","record","push","concat","useSelection","config","rowSelection","preserveSelectedRowKeys","selectedRowKeys","defaultSelectedRowKeys","getCheckboxProps","onChange","onSelectionChange","onSelect","onSelectAll","onSelectInvert","onSelectNone","onSelectMultiple","columnWidth","selectionColWidth","type","selectionType","selections","fixed","renderCell","customizeRenderCell","hideSelectAll","checkStrictly","prefixCls","pageData","getRecordByKey","getRowKey","expandType","locale","tableLocale","getPopupContainer","mergedSelectedKeys","setMergedSelectedKeys","value","preserveRecordsRef","useRef","Map","updatePreserveRecordsCache","keys","newCache","key","current","has","get","set","useEffect","keyEntities","convertData","keysSet","Set","map","index","preserveRecords","Array","from","reduce","total","_ref","externalGetKey","childrenPropName","flattedData","checkboxPropsMap","checkboxProps","process","env","NODE_ENV","isCheckboxDisabled","r","_a","disabled","derivedSelectedKeys","derivedHalfSelectedKeys","checkedKeys","halfCheckedKeys","derivedSelectedKeySet","slice","derivedHalfSelectedKeySet","lastSelectedKey","setLastSelectedKey","setSelectedKeys","method","availableKeys","records","undefined","triggerSingleSelection","selected","event","rows","k","mergedSelections","selectionList","selection","text","selectionAll","filter","checkProps","selectInvert","keySet","delete","add","selectNone","Object","assign","_a2","_len","arguments","length","rest","_key","call","apply","transformColumns","columns","includes","col","cloneColumns","recordKeys","checkedCurrentAll","every","checkedCurrentSome","some","onSelectAllChange","changeKeys","title","customizeSelections","menu","items","onSelectionClick","onClick","label","createElement","className","allDisabledData","checked","_ref2","allDisabled","allDisabledAndChecked","_ref3","allDisabledSomeChecked","_ref4","indeterminate","skipGroup","_","node","e","stopPropagation","nativeEvent","mergedIndeterminate","_ref5","shiftKey","startIndex","endIndex","pointKeys","recordKey","recordIndex","rangeKeys","changedKeys","originCheckedKeys","result","nextCheckedKeys","tempKeySet","renderSelectionCell","findIndex","columnType","expandColumn","restColumns","selectionColumnIndex","indexOf","column","prevCol","nextCol","mergedFixed","columnCls","selectionColumn","width","columnTitle","render","onCell"],"sources":["/Users/hamsterpapa/Desktop/ENS/Wallet-browser-extension/mwallet/node_modules/antd/es/table/hooks/useSelection.js"],"sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport DownOutlined from \"@ant-design/icons/es/icons/DownOutlined\";\nimport classNames from 'classnames';\nimport { INTERNAL_COL_DEFINE } from 'rc-table';\nimport { arrAdd, arrDel } from \"rc-tree/es/util\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport * as React from 'react';\nimport { useCallback, useMemo, useState } from 'react';\nimport warning from '../../_util/warning';\nimport Checkbox from '../../checkbox';\nimport Dropdown from '../../dropdown';\nimport Radio from '../../radio';\n// TODO: warning if use ajax!!!\nexport const SELECTION_COLUMN = {};\nexport const SELECTION_ALL = 'SELECT_ALL';\nexport const SELECTION_INVERT = 'SELECT_INVERT';\nexport const SELECTION_NONE = 'SELECT_NONE';\nconst EMPTY_LIST = [];\nconst flattenData = (childrenColumnName, data) => {\n  let list = [];\n  (data || []).forEach(record => {\n    list.push(record);\n    if (record && typeof record === 'object' && childrenColumnName in record) {\n      list = [].concat(_toConsumableArray(list), _toConsumableArray(flattenData(childrenColumnName, record[childrenColumnName])));\n    }\n  });\n  return list;\n};\nconst useSelection = (config, rowSelection) => {\n  const {\n    preserveSelectedRowKeys,\n    selectedRowKeys,\n    defaultSelectedRowKeys,\n    getCheckboxProps,\n    onChange: onSelectionChange,\n    onSelect,\n    onSelectAll,\n    onSelectInvert,\n    onSelectNone,\n    onSelectMultiple,\n    columnWidth: selectionColWidth,\n    type: selectionType,\n    selections,\n    fixed,\n    renderCell: customizeRenderCell,\n    hideSelectAll,\n    checkStrictly = true\n  } = rowSelection || {};\n  const {\n    prefixCls,\n    data,\n    pageData,\n    getRecordByKey,\n    getRowKey,\n    expandType,\n    childrenColumnName,\n    locale: tableLocale,\n    getPopupContainer\n  } = config;\n  // ========================= Keys =========================\n  const [mergedSelectedKeys, setMergedSelectedKeys] = useMergedState(selectedRowKeys || defaultSelectedRowKeys || EMPTY_LIST, {\n    value: selectedRowKeys\n  });\n  // ======================== Caches ========================\n  const preserveRecordsRef = React.useRef(new Map());\n  const updatePreserveRecordsCache = useCallback(keys => {\n    if (preserveSelectedRowKeys) {\n      const newCache = new Map();\n      // Keep key if mark as preserveSelectedRowKeys\n      keys.forEach(key => {\n        let record = getRecordByKey(key);\n        if (!record && preserveRecordsRef.current.has(key)) {\n          record = preserveRecordsRef.current.get(key);\n        }\n        newCache.set(key, record);\n      });\n      // Refresh to new cache\n      preserveRecordsRef.current = newCache;\n    }\n  }, [getRecordByKey, preserveSelectedRowKeys]);\n  // Update cache with selectedKeys\n  React.useEffect(() => {\n    updatePreserveRecordsCache(mergedSelectedKeys);\n  }, [mergedSelectedKeys]);\n  const {\n    keyEntities\n  } = useMemo(() => {\n    if (checkStrictly) {\n      return {\n        keyEntities: null\n      };\n    }\n    let convertData = data;\n    if (preserveSelectedRowKeys) {\n      const keysSet = new Set(data.map((record, index) => getRowKey(record, index)));\n      // remove preserveRecords that duplicate data\n      const preserveRecords = Array.from(preserveRecordsRef.current).reduce((total, _ref) => {\n        let [key, value] = _ref;\n        return keysSet.has(key) ? total : total.concat(value);\n      }, []);\n      convertData = [].concat(_toConsumableArray(convertData), _toConsumableArray(preserveRecords));\n    }\n    return convertDataToEntities(convertData, {\n      externalGetKey: getRowKey,\n      childrenPropName: childrenColumnName\n    });\n  }, [data, getRowKey, checkStrictly, childrenColumnName, preserveSelectedRowKeys]);\n  // Get flatten data\n  const flattedData = useMemo(() => flattenData(childrenColumnName, pageData), [childrenColumnName, pageData]);\n  // Get all checkbox props\n  const checkboxPropsMap = useMemo(() => {\n    const map = new Map();\n    flattedData.forEach((record, index) => {\n      const key = getRowKey(record, index);\n      const checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};\n      map.set(key, checkboxProps);\n      process.env.NODE_ENV !== \"production\" ? warning(!('checked' in checkboxProps || 'defaultChecked' in checkboxProps), 'Table', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.') : void 0;\n    });\n    return map;\n  }, [flattedData, getRowKey, getCheckboxProps]);\n  const isCheckboxDisabled = useCallback(r => {\n    var _a;\n    return !!((_a = checkboxPropsMap.get(getRowKey(r))) === null || _a === void 0 ? void 0 : _a.disabled);\n  }, [checkboxPropsMap, getRowKey]);\n  const [derivedSelectedKeys, derivedHalfSelectedKeys] = useMemo(() => {\n    if (checkStrictly) {\n      return [mergedSelectedKeys || [], []];\n    }\n    const {\n      checkedKeys,\n      halfCheckedKeys\n    } = conductCheck(mergedSelectedKeys, true, keyEntities, isCheckboxDisabled);\n    return [checkedKeys || [], halfCheckedKeys];\n  }, [mergedSelectedKeys, checkStrictly, keyEntities, isCheckboxDisabled]);\n  const derivedSelectedKeySet = useMemo(() => {\n    const keys = selectionType === 'radio' ? derivedSelectedKeys.slice(0, 1) : derivedSelectedKeys;\n    return new Set(keys);\n  }, [derivedSelectedKeys, selectionType]);\n  const derivedHalfSelectedKeySet = useMemo(() => selectionType === 'radio' ? new Set() : new Set(derivedHalfSelectedKeys), [derivedHalfSelectedKeys, selectionType]);\n  // Save last selected key to enable range selection\n  const [lastSelectedKey, setLastSelectedKey] = useState(null);\n  // Reset if rowSelection reset\n  React.useEffect(() => {\n    if (!rowSelection) {\n      setMergedSelectedKeys(EMPTY_LIST);\n    }\n  }, [!!rowSelection]);\n  const setSelectedKeys = useCallback((keys, method) => {\n    let availableKeys;\n    let records;\n    updatePreserveRecordsCache(keys);\n    if (preserveSelectedRowKeys) {\n      availableKeys = keys;\n      records = keys.map(key => preserveRecordsRef.current.get(key));\n    } else {\n      // Filter key which not exist in the `dataSource`\n      availableKeys = [];\n      records = [];\n      keys.forEach(key => {\n        const record = getRecordByKey(key);\n        if (record !== undefined) {\n          availableKeys.push(key);\n          records.push(record);\n        }\n      });\n    }\n    setMergedSelectedKeys(availableKeys);\n    onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(availableKeys, records, {\n      type: method\n    });\n  }, [setMergedSelectedKeys, getRecordByKey, onSelectionChange, preserveSelectedRowKeys]);\n  // ====================== Selections ======================\n  // Trigger single `onSelect` event\n  const triggerSingleSelection = useCallback((key, selected, keys, event) => {\n    if (onSelect) {\n      const rows = keys.map(k => getRecordByKey(k));\n      onSelect(getRecordByKey(key), selected, rows, event);\n    }\n    setSelectedKeys(keys, 'single');\n  }, [onSelect, getRecordByKey, setSelectedKeys]);\n  const mergedSelections = useMemo(() => {\n    if (!selections || hideSelectAll) {\n      return null;\n    }\n    const selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE] : selections;\n    return selectionList.map(selection => {\n      if (selection === SELECTION_ALL) {\n        return {\n          key: 'all',\n          text: tableLocale.selectionAll,\n          onSelect() {\n            setSelectedKeys(data.map((record, index) => getRowKey(record, index)).filter(key => {\n              const checkProps = checkboxPropsMap.get(key);\n              return !(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled) || derivedSelectedKeySet.has(key);\n            }), 'all');\n          }\n        };\n      }\n      if (selection === SELECTION_INVERT) {\n        return {\n          key: 'invert',\n          text: tableLocale.selectInvert,\n          onSelect() {\n            const keySet = new Set(derivedSelectedKeySet);\n            pageData.forEach((record, index) => {\n              const key = getRowKey(record, index);\n              const checkProps = checkboxPropsMap.get(key);\n              if (!(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled)) {\n                if (keySet.has(key)) {\n                  keySet.delete(key);\n                } else {\n                  keySet.add(key);\n                }\n              }\n            });\n            const keys = Array.from(keySet);\n            if (onSelectInvert) {\n              process.env.NODE_ENV !== \"production\" ? warning(false, 'Table', '`onSelectInvert` will be removed in future. Please use `onChange` instead.') : void 0;\n              onSelectInvert(keys);\n            }\n            setSelectedKeys(keys, 'invert');\n          }\n        };\n      }\n      if (selection === SELECTION_NONE) {\n        return {\n          key: 'none',\n          text: tableLocale.selectNone,\n          onSelect() {\n            onSelectNone === null || onSelectNone === void 0 ? void 0 : onSelectNone();\n            setSelectedKeys(Array.from(derivedSelectedKeySet).filter(key => {\n              const checkProps = checkboxPropsMap.get(key);\n              return checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled;\n            }), 'none');\n          }\n        };\n      }\n      return selection;\n    }).map(selection => Object.assign(Object.assign({}, selection), {\n      onSelect: function () {\n        var _a2;\n        var _a;\n        for (var _len = arguments.length, rest = new Array(_len), _key = 0; _key < _len; _key++) {\n          rest[_key] = arguments[_key];\n        }\n        (_a = selection.onSelect) === null || _a === void 0 ? void 0 : (_a2 = _a).call.apply(_a2, [selection].concat(rest));\n        setLastSelectedKey(null);\n      }\n    }));\n  }, [selections, derivedSelectedKeySet, pageData, getRowKey, onSelectInvert, setSelectedKeys]);\n  // ======================= Columns ========================\n  const transformColumns = useCallback(columns => {\n    var _a;\n    // >>>>>>>>>>> Skip if not exists `rowSelection`\n    if (!rowSelection) {\n      process.env.NODE_ENV !== \"production\" ? warning(!columns.includes(SELECTION_COLUMN), 'Table', '`rowSelection` is not config but `SELECTION_COLUMN` exists in the `columns`.') : void 0;\n      return columns.filter(col => col !== SELECTION_COLUMN);\n    }\n    // >>>>>>>>>>> Support selection\n    let cloneColumns = _toConsumableArray(columns);\n    const keySet = new Set(derivedSelectedKeySet);\n    // Record key only need check with enabled\n    const recordKeys = flattedData.map(getRowKey).filter(key => !checkboxPropsMap.get(key).disabled);\n    const checkedCurrentAll = recordKeys.every(key => keySet.has(key));\n    const checkedCurrentSome = recordKeys.some(key => keySet.has(key));\n    const onSelectAllChange = () => {\n      const changeKeys = [];\n      if (checkedCurrentAll) {\n        recordKeys.forEach(key => {\n          keySet.delete(key);\n          changeKeys.push(key);\n        });\n      } else {\n        recordKeys.forEach(key => {\n          if (!keySet.has(key)) {\n            keySet.add(key);\n            changeKeys.push(key);\n          }\n        });\n      }\n      const keys = Array.from(keySet);\n      onSelectAll === null || onSelectAll === void 0 ? void 0 : onSelectAll(!checkedCurrentAll, keys.map(k => getRecordByKey(k)), changeKeys.map(k => getRecordByKey(k)));\n      setSelectedKeys(keys, 'all');\n      setLastSelectedKey(null);\n    };\n    // ===================== Render =====================\n    // Title Cell\n    let title;\n    if (selectionType !== 'radio') {\n      let customizeSelections;\n      if (mergedSelections) {\n        const menu = {\n          getPopupContainer,\n          items: mergedSelections.map((selection, index) => {\n            const {\n              key,\n              text,\n              onSelect: onSelectionClick\n            } = selection;\n            return {\n              key: key !== null && key !== void 0 ? key : index,\n              onClick: () => {\n                onSelectionClick === null || onSelectionClick === void 0 ? void 0 : onSelectionClick(recordKeys);\n              },\n              label: text\n            };\n          })\n        };\n        customizeSelections = /*#__PURE__*/React.createElement(\"div\", {\n          className: `${prefixCls}-selection-extra`\n        }, /*#__PURE__*/React.createElement(Dropdown, {\n          menu: menu,\n          getPopupContainer: getPopupContainer\n        }, /*#__PURE__*/React.createElement(\"span\", null, /*#__PURE__*/React.createElement(DownOutlined, null))));\n      }\n      const allDisabledData = flattedData.map((record, index) => {\n        const key = getRowKey(record, index);\n        const checkboxProps = checkboxPropsMap.get(key) || {};\n        return Object.assign({\n          checked: keySet.has(key)\n        }, checkboxProps);\n      }).filter(_ref2 => {\n        let {\n          disabled\n        } = _ref2;\n        return disabled;\n      });\n      const allDisabled = !!allDisabledData.length && allDisabledData.length === flattedData.length;\n      const allDisabledAndChecked = allDisabled && allDisabledData.every(_ref3 => {\n        let {\n          checked\n        } = _ref3;\n        return checked;\n      });\n      const allDisabledSomeChecked = allDisabled && allDisabledData.some(_ref4 => {\n        let {\n          checked\n        } = _ref4;\n        return checked;\n      });\n      title = !hideSelectAll && /*#__PURE__*/React.createElement(\"div\", {\n        className: `${prefixCls}-selection`\n      }, /*#__PURE__*/React.createElement(Checkbox, {\n        checked: !allDisabled ? !!flattedData.length && checkedCurrentAll : allDisabledAndChecked,\n        indeterminate: !allDisabled ? !checkedCurrentAll && checkedCurrentSome : !allDisabledAndChecked && allDisabledSomeChecked,\n        onChange: onSelectAllChange,\n        disabled: flattedData.length === 0 || allDisabled,\n        \"aria-label\": customizeSelections ? 'Custom selection' : 'Select all',\n        skipGroup: true\n      }), customizeSelections);\n    }\n    // Body Cell\n    let renderCell;\n    if (selectionType === 'radio') {\n      renderCell = (_, record, index) => {\n        const key = getRowKey(record, index);\n        const checked = keySet.has(key);\n        return {\n          node: /*#__PURE__*/React.createElement(Radio, Object.assign({}, checkboxPropsMap.get(key), {\n            checked: checked,\n            onClick: e => e.stopPropagation(),\n            onChange: event => {\n              if (!keySet.has(key)) {\n                triggerSingleSelection(key, true, [key], event.nativeEvent);\n              }\n            }\n          })),\n          checked\n        };\n      };\n    } else {\n      renderCell = (_, record, index) => {\n        var _a;\n        const key = getRowKey(record, index);\n        const checked = keySet.has(key);\n        const indeterminate = derivedHalfSelectedKeySet.has(key);\n        const checkboxProps = checkboxPropsMap.get(key);\n        let mergedIndeterminate;\n        if (expandType === 'nest') {\n          mergedIndeterminate = indeterminate;\n          process.env.NODE_ENV !== \"production\" ? warning(typeof (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== 'boolean', 'Table', 'set `indeterminate` using `rowSelection.getCheckboxProps` is not allowed with tree structured dataSource.') : void 0;\n        } else {\n          mergedIndeterminate = (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== null && _a !== void 0 ? _a : indeterminate;\n        }\n        // Record checked\n        return {\n          node: /*#__PURE__*/React.createElement(Checkbox, Object.assign({}, checkboxProps, {\n            indeterminate: mergedIndeterminate,\n            checked: checked,\n            skipGroup: true,\n            onClick: e => e.stopPropagation(),\n            onChange: _ref5 => {\n              let {\n                nativeEvent\n              } = _ref5;\n              const {\n                shiftKey\n              } = nativeEvent;\n              let startIndex = -1;\n              let endIndex = -1;\n              // Get range of this\n              if (shiftKey && checkStrictly) {\n                const pointKeys = new Set([lastSelectedKey, key]);\n                recordKeys.some((recordKey, recordIndex) => {\n                  if (pointKeys.has(recordKey)) {\n                    if (startIndex === -1) {\n                      startIndex = recordIndex;\n                    } else {\n                      endIndex = recordIndex;\n                      return true;\n                    }\n                  }\n                  return false;\n                });\n              }\n              if (endIndex !== -1 && startIndex !== endIndex && checkStrictly) {\n                // Batch update selections\n                const rangeKeys = recordKeys.slice(startIndex, endIndex + 1);\n                const changedKeys = [];\n                if (checked) {\n                  rangeKeys.forEach(recordKey => {\n                    if (keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.delete(recordKey);\n                    }\n                  });\n                } else {\n                  rangeKeys.forEach(recordKey => {\n                    if (!keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.add(recordKey);\n                    }\n                  });\n                }\n                const keys = Array.from(keySet);\n                onSelectMultiple === null || onSelectMultiple === void 0 ? void 0 : onSelectMultiple(!checked, keys.map(recordKey => getRecordByKey(recordKey)), changedKeys.map(recordKey => getRecordByKey(recordKey)));\n                setSelectedKeys(keys, 'multiple');\n              } else {\n                // Single record selected\n                const originCheckedKeys = derivedSelectedKeys;\n                if (checkStrictly) {\n                  const checkedKeys = checked ? arrDel(originCheckedKeys, key) : arrAdd(originCheckedKeys, key);\n                  triggerSingleSelection(key, !checked, checkedKeys, nativeEvent);\n                } else {\n                  // Always fill first\n                  const result = conductCheck([].concat(_toConsumableArray(originCheckedKeys), [key]), true, keyEntities, isCheckboxDisabled);\n                  const {\n                    checkedKeys,\n                    halfCheckedKeys\n                  } = result;\n                  let nextCheckedKeys = checkedKeys;\n                  // If remove, we do it again to correction\n                  if (checked) {\n                    const tempKeySet = new Set(checkedKeys);\n                    tempKeySet.delete(key);\n                    nextCheckedKeys = conductCheck(Array.from(tempKeySet), {\n                      checked: false,\n                      halfCheckedKeys\n                    }, keyEntities, isCheckboxDisabled).checkedKeys;\n                  }\n                  triggerSingleSelection(key, !checked, nextCheckedKeys, nativeEvent);\n                }\n              }\n              if (checked) {\n                setLastSelectedKey(null);\n              } else {\n                setLastSelectedKey(key);\n              }\n            }\n          })),\n          checked\n        };\n      };\n    }\n    const renderSelectionCell = (_, record, index) => {\n      const {\n        node,\n        checked\n      } = renderCell(_, record, index);\n      if (customizeRenderCell) {\n        return customizeRenderCell(checked, record, index, node);\n      }\n      return node;\n    };\n    // Insert selection column if not exist\n    if (!cloneColumns.includes(SELECTION_COLUMN)) {\n      // Always after expand icon\n      if (cloneColumns.findIndex(col => {\n        var _a;\n        return ((_a = col[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN';\n      }) === 0) {\n        const [expandColumn, ...restColumns] = cloneColumns;\n        cloneColumns = [expandColumn, SELECTION_COLUMN].concat(_toConsumableArray(restColumns));\n      } else {\n        // Normal insert at first column\n        cloneColumns = [SELECTION_COLUMN].concat(_toConsumableArray(cloneColumns));\n      }\n    }\n    // Deduplicate selection column\n    const selectionColumnIndex = cloneColumns.indexOf(SELECTION_COLUMN);\n    process.env.NODE_ENV !== \"production\" ? warning(cloneColumns.filter(col => col === SELECTION_COLUMN).length <= 1, 'Table', 'Multiple `SELECTION_COLUMN` exist in `columns`.') : void 0;\n    cloneColumns = cloneColumns.filter((column, index) => column !== SELECTION_COLUMN || index === selectionColumnIndex);\n    // Fixed column logic\n    const prevCol = cloneColumns[selectionColumnIndex - 1];\n    const nextCol = cloneColumns[selectionColumnIndex + 1];\n    let mergedFixed = fixed;\n    if (mergedFixed === undefined) {\n      if ((nextCol === null || nextCol === void 0 ? void 0 : nextCol.fixed) !== undefined) {\n        mergedFixed = nextCol.fixed;\n      } else if ((prevCol === null || prevCol === void 0 ? void 0 : prevCol.fixed) !== undefined) {\n        mergedFixed = prevCol.fixed;\n      }\n    }\n    if (mergedFixed && prevCol && ((_a = prevCol[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN' && prevCol.fixed === undefined) {\n      prevCol.fixed = mergedFixed;\n    }\n    const columnCls = classNames(`${prefixCls}-selection-col`, {\n      [`${prefixCls}-selection-col-with-dropdown`]: selections && selectionType === 'checkbox'\n    });\n    // Replace with real selection column\n    const selectionColumn = {\n      fixed: mergedFixed,\n      width: selectionColWidth,\n      className: `${prefixCls}-selection-column`,\n      title: rowSelection.columnTitle || title,\n      render: renderSelectionCell,\n      onCell: rowSelection.onCell,\n      [INTERNAL_COL_DEFINE]: {\n        className: columnCls\n      }\n    };\n    return cloneColumns.map(col => col === SELECTION_COLUMN ? selectionColumn : col);\n  }, [getRowKey, flattedData, rowSelection, derivedSelectedKeys, derivedSelectedKeySet, derivedHalfSelectedKeySet, selectionColWidth, mergedSelections, expandType, lastSelectedKey, checkboxPropsMap, onSelectMultiple, triggerSingleSelection, isCheckboxDisabled]);\n  return [transformColumns, derivedSelectedKeySet];\n};\nexport default useSelection;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}